//This file is generated by makeb64vars.sh
var ustadmobilejs = ["", "ustadmobile.js"];
var ustadmobilebooklistjs = ["", "ustadmobile-booklist.js"];
var ustadmobilecommonjs = ["LyoKPCEtLSBUaGlzIGZpbGUgaXMgcGFydCBvZiBVc3RhZCBNb2JpbGUuICAKICAgIAogICAgVXN0YWQgTW9iaWxlIENvcHlyaWdodCAoQykgMjAxMS0yMDEzIFRvdWdocmEgVGVjaG5vbG9naWVzIEZaIExMQy4KCiAgICBVc3RhZCBNb2JpbGUgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeQogICAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkKICAgIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yCiAgICAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uIHdpdGggdGhlIGZvbGxvd2luZyBhZGRpdGlvbmFsIHRlcm1zOgogICAgCiAgICBBbGwgbmFtZXMsIGxpbmtzLCBhbmQgbG9nb3Mgb2YgVXN0YWQgTW9iaWxlIGFuZCBUb3VnaHJhIFRlY2hub2xvZ2llcyBGWiAKICAgIExMQyBtdXN0IGJlIGtlcHQgYXMgdGhleSBhcmUgaW4gdGhlIG9yaWdpbmFsIGRpc3RyaWJ1dGlvbi4gIElmIGFueSBuZXcKICAgIHNjcmVlbnMgYXJlIGFkZGVkIHlvdSBtdXN0IGluY2x1ZGUgdGhlIFVzdGFkIE1vYmlsZSBsb2dvIGFzIGl0IGhhcyBiZWVuCiAgICB1c2VkIGluIHRoZSBvcmlnaW5hbCBkaXN0cmlidXRpb24uICBZb3UgbWF5IG5vdCBjcmVhdGUgYW55IG5ldyAKICAgIGZ1bmN0aW9uYWxpdHkgd2hvc2UgcHVycG9zZSBpcyB0byBkaW1pbmlzaCBvciByZW1vdmUgdGhlIFVzdGFkIE1vYmlsZSAKICAgIExvZ28uICBZb3UgbXVzdCBsZWF2ZSB0aGUgVXN0YWQgTW9iaWxlIGxvZ28gYXMgdGhlIGxvZ28gZm9yIHRoZSAKICAgIGFwcGxpY2F0aW9uIHRvIGJlIHVzZWQgd2l0aCBhbnkgbGF1bmNoZXIgKGUuZy4gdGhlIG1vYmlsZSBhcHAgbGF1bmNoZXIpLiAgCiAgICAKICAgIElmIHlvdSB3YW50IGEgY29tbWVyY2lhbCBsaWNlbnNlIHRvIHJlbW92ZSB0aGUgYWJvdmUgcmVzdHJpY3Rpb24geW91IG11c3QKICAgIGNvbnRhY3QgdXMuICAKICAgIAogICAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UKICAgIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LgoKICAgIFVzdGFkIE1vYmlsZSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLAogICAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YKICAgIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGUKICAgIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuCgoKCgpUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZS4gIEl0IGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBHTlUgR0VORVJBTCBQVUJMSUMgTElDRU5TRSAoIGh0dHA6Ly93d3cuZ251Lm9yZy9jb3B5bGVmdC9ncGwuaHRtbCApIHdpdGggdGhlIGZvbGxvd2luZyAKCkdQTCBMaWNlbnNlIEFkZGl0aW9uYWwgVGVybXMKCkFsbCBuYW1lcywgbGlua3MsIGFuZCBsb2dvcyBvZiBVc3RhZCBNb2JpbGUgYW5kIFRvdWdocmEgVGVjaG5vbG9naWVzIEZaIExMQyBtdXN0IGJlIGtlcHQgYXMgdGhleSBhcmUgaW4gdGhlIG9yaWdpbmFsIGRpc3RyaWJ1dGlvbi4gIElmIGFueSBuZXcgc2NyZWVucyBhcmUgYWRkZWQgeW91IG11c3QgaW5jbHVkZSB0aGUgVXN0YWQgTW9iaWxlIGxvZ28gYXMgaXQgaGFzIGJlZW4gdXNlZCBpbiB0aGUgb3JpZ2luYWwgZGlzdHJpYnV0aW9uLiAgWW91IG1heSBub3QgY3JlYXRlIGFueSBuZXcgZnVuY3Rpb25hbGl0eSB3aG9zZSBwdXJwb3NlIGlzIHRvIGRpbWluaXNoIG9yIHJlbW92ZSB0aGUgVXN0YWQgTW9iaWxlIExvZ28uICBZb3UgbXVzdCBsZWF2ZSB0aGUgVXN0YWQgTW9iaWxlIGxvZ28gYXMgdGhlIGxvZ28gZm9yIHRoZSBhcHBsaWNhdGlvbiB0byBiZSB1c2VkIHdpdGggYW55IGxhdW5jaGVyIChlLmcuIHRoZSBtb2JpbGUgYXBwIGxhdW5jaGVyKS4gIAoKSWYgeW91IG5lZWQgYSBjb21tZXJjaWFsIGxpY2Vuc2UgdG8gcmVtb3ZlIHRoZXNlIHJlc3RyaWN0aW9ucyBwbGVhc2UgY29udGFjdCB1cyBieSBlbWFpbGluZyBpbmZvQHVzdGFkbW9iaWxlLmNvbSAKCi0tPgoKKi8KCi8vVG8gYmUgcnVuIGF0IHRoZSBzdGFydCBvZiBhcHAgYW5kIGF0IGV2ZXJ5IHBhZ2UuIChpbmNsdWRlIGl0IGluIHRoZSBIZWFkZXJFbGVtZW50IHNvIHRoYXQgaXQgaXMgY2FsbGVkIG9uIGV2ZXJ5IHBhZ2UuCgovL3JlcGxhY2UgZXZlcnkgc3RyaW5nIHdpdGggdGhpcyBmdW5jdGlvbi4gZWc6IGFsZXJ0KF8oZXJyb3IpICsgdmFsdWUgKTsKCnZhciBleGVMYXN0UGFnZSA9ICIuLi8iOwp2YXIgZXhlTWVudVBhZ2UgPSAidXN0YWRtb2JpbGVfbWVudVBhZ2UuaHRtbCI7CnZhciBleGVNZW51UGFnZTIgPSAidXN0YWRtb2JpbGVfbWVudVBhZ2UyLmh0bWwiOwovL2xvY2FsU3RvcmFnZS5zZXRJdGVtKCdleGVNZW51UGFnZScsZXhlTWVudVApOwp2YXIgZ2xvYmFsWE1MTGlzdEZvbGRlck5hbWUgPSAiYWxsIjsKCgpkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdkZXZpY2VyZWFkeScsIGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnJlcXVlc3RGaWxlU3lzdGVtICA9IHdpbmRvdy5yZXF1ZXN0RmlsZVN5c3RlbSB8fCB3aW5kb3cud2Via2l0UmVxdWVzdEZpbGVTeXN0ZW07CiAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnJlcXVlc3RGaWxlU3lzdGVtKExvY2FsRmlsZVN5c3RlbS5QRVJTSVNURU5ULCAwLCBnb3RGU3VtYywgY29tbW9uZmFpbCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBmYWxzZSk7CgpmdW5jdGlvbiBfKG1zZ2lkKSB7CiAgICBpZiAobXNnaWQgaW4gbWVzc2FnZXMpIHsKICAgICAgICByZXR1cm4gbWVzc2FnZXNbbXNnaWRdOwogICAgfWVsc2UgewogICAgICAgIHJldHVybiBtc2dpZDsKICAgIH0KfQoKZnVuY3Rpb24gY29tbW9uZmFpbCgpewogICAgZGVidWdMb2coIkZhaWxlZCBhdCB1c3RhZG1vYmlsZS1jb21tb24uanMuIik7CiAgICBhbGVydCgiU29tZXRoaW5nIHdlbnQgd3JvbmcgaW4gdGhlIGFwcCBzdGFydCBwcm9jZWR1cmUuIik7Cn0KCgpmdW5jdGlvbiBsb2FkTG9jYWxlKGxvY2FsZUNvZGUpIHsKICAgIHZhciBpbXBvcnRlZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpOwogICAgaW1wb3J0ZWQuc3JjID0gJy9sb2NhbGUvZW4uanMnOyAvLyB0byBiZSBjaGFuZ2VkLgogICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChpbXBvcnRlZCk7Cn0KCmZ1bmN0aW9uIGdvdEZTdW1jKGZpbGVTeXN0ZW0pewogICAgLy93aW5kb3cucm9vdEZTID0gZmlsZVN5c3RlbS5yb290OwogICAgLy9zbyB0aGUgcm9vdEZTLmZ1bGxQYXRoIGlzIHRoZSBhcHAgUGF0aC48IFVzZSB0aGF0IChub3QgdGVzdGVkKS4KCWRlYnVnTG9nKCJDb3Jkb3ZhIGlzIHJlYWR5OiBpbiB1c3RhZG1vYmlsZS1jb21tb24uanMiKTsKCS8vYWxlcnQoIlNUQVJUVVA6IENvcmRvdmEgaXMgcmVhZHkiKTsKCQl2YXIgZ2V0RGlyID0gInVzdGFkbW9iaWxlQ29udGVudCI7CiAgICAgICAgZGVidWdMb2coIkNIRUNLSU5HIElGIERJUkVDVE9SWTogIiArIGdldERpciArICIgRVhJU1RTLiBJRiBOT1QsIENSRUFUSU5HIElULiIpOwogICAgICAgIGZpbGVTeXN0ZW0ucm9vdC5nZXREaXJlY3RvcnkoZ2V0RGlyLCB7Y3JlYXRlOnRydWUsIGV4Y2x1c2l2ZTpmYWxzZX0sIGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIGRlYnVnTG9nKCJTVEFSVFVQOiBDcmVhdGluZyBEaXIgL3VzdGFkbW9iaWxlQ29udGVudC8gc3VjY2VzcyBvciBhbHJlYWR5IGV4aXN0cy4iKTsKCQkJdmFyIGdldERpcjIgPSAidXN0YWRtb2JpbGVDb250ZW50LyIgKyBnbG9iYWxYTUxMaXN0Rm9sZGVyTmFtZTsKCQkJZGVidWdMb2coIlNUQVJUVVA6IENIRUNLSU5HIElGIERJUkVDVE9SWTogIiArIGdldERpcjIgKyAiIEVYSVNUUy4gSUYgTk9ULCBDUkVBVElORyBJVC4iKTsKCQkJZmlsZVN5c3RlbS5yb290LmdldERpcmVjdG9yeShnZXREaXIyLCB7Y3JlYXRlOnRydWUsIGV4Y2x1c2l2ZTpmYWxzZX0sIGZ1bmN0aW9uKCl7CgkJCQkJZGVidWdMb2coIlNUQVJUVVA6IENyZWF0aW5nIERpciAvdXN0YWRtb2JpbGVDb250ZW50L2FsbCBzdWNjZXNzIG9yIGFscmVhZHkgZXhpc3RzLiIpOwoJCQkJfSwgZnVuY3Rpb24oKXtkZWJ1Z0xvZygiU1RBUlRVUDogQ3JlYXRpbmcgcGFja2FnZSBEaXIgL3VzdGFkbW9iaWxlQ29udGVudC8gdW5zdWNjZXNzLiIpOyQubW9iaWxlLmxvYWRpbmcoJ2hpZGUnKTsgYWxlcnQoIlNUQVJUVVA6IFNvbWUgZmVhdHVyZXMgbWlnaHQgbm90IHdvcmsgb24geW91ciBkZXZpY2UuIik7fSk7CiAgICAgICAgfSwgZnVuY3Rpb24oKXtkZWJ1Z0xvZygiU1RBUlRVUDogQ3JlYXRpbmcgcGFja2FnZSBEaXIgL3VzdGFkbW9iaWxlQ29udGVudC9hbGwvIHVuc3VjY2Vzcy4iKTskLm1vYmlsZS5sb2FkaW5nKCdoaWRlJyk7IGFsZXJ0KCJTVEFSVFVQOiBTb21lIGZlYXR1cmVzIG1pZ2h0IG5vdCB3b3JrIG9uIHlvdXIgZGV2aWNlLiIpO30pOwp9CgoK", "ustadmobile-common.js"];
var ustadmobileconstantsjs = ["LyoKPCEtLSBUaGlzIGZpbGUgaXMgcGFydCBvZiBVc3RhZCBNb2JpbGUuICAKICAgIAogICAgVXN0YWQgTW9iaWxlIENvcHlyaWdodCAoQykgMjAxMS0yMDEzIFRvdWdocmEgVGVjaG5vbG9naWVzIEZaIExMQy4KCiAgICBVc3RhZCBNb2JpbGUgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeQogICAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkKICAgIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yCiAgICAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uIHdpdGggdGhlIGZvbGxvd2luZyBhZGRpdGlvbmFsIHRlcm1zOgogICAgCiAgICBBbGwgbmFtZXMsIGxpbmtzLCBhbmQgbG9nb3Mgb2YgVXN0YWQgTW9iaWxlIGFuZCBUb3VnaHJhIFRlY2hub2xvZ2llcyBGWiAKICAgIExMQyBtdXN0IGJlIGtlcHQgYXMgdGhleSBhcmUgaW4gdGhlIG9yaWdpbmFsIGRpc3RyaWJ1dGlvbi4gIElmIGFueSBuZXcKICAgIHNjcmVlbnMgYXJlIGFkZGVkIHlvdSBtdXN0IGluY2x1ZGUgdGhlIFVzdGFkIE1vYmlsZSBsb2dvIGFzIGl0IGhhcyBiZWVuCiAgICB1c2VkIGluIHRoZSBvcmlnaW5hbCBkaXN0cmlidXRpb24uICBZb3UgbWF5IG5vdCBjcmVhdGUgYW55IG5ldyAKICAgIGZ1bmN0aW9uYWxpdHkgd2hvc2UgcHVycG9zZSBpcyB0byBkaW1pbmlzaCBvciByZW1vdmUgdGhlIFVzdGFkIE1vYmlsZSAKICAgIExvZ28uICBZb3UgbXVzdCBsZWF2ZSB0aGUgVXN0YWQgTW9iaWxlIGxvZ28gYXMgdGhlIGxvZ28gZm9yIHRoZSAKICAgIGFwcGxpY2F0aW9uIHRvIGJlIHVzZWQgd2l0aCBhbnkgbGF1bmNoZXIgKGUuZy4gdGhlIG1vYmlsZSBhcHAgbGF1bmNoZXIpLiAgCiAgICAKICAgIElmIHlvdSB3YW50IGEgY29tbWVyY2lhbCBsaWNlbnNlIHRvIHJlbW92ZSB0aGUgYWJvdmUgcmVzdHJpY3Rpb24geW91IG11c3QKICAgIGNvbnRhY3QgdXMuICAKICAgIAogICAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UKICAgIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LgoKICAgIFVzdGFkIE1vYmlsZSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLAogICAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YKICAgIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGUKICAgIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuCgoKCgpUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZS4gIEl0IGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBHTlUgR0VORVJBTCBQVUJMSUMgTElDRU5TRSAoIGh0dHA6Ly93d3cuZ251Lm9yZy9jb3B5bGVmdC9ncGwuaHRtbCApIHdpdGggdGhlIGZvbGxvd2luZyAKCkdQTCBMaWNlbnNlIEFkZGl0aW9uYWwgVGVybXMKCkFsbCBuYW1lcywgbGlua3MsIGFuZCBsb2dvcyBvZiBVc3RhZCBNb2JpbGUgYW5kIFRvdWdocmEgVGVjaG5vbG9naWVzIEZaIExMQyBtdXN0IGJlIGtlcHQgYXMgdGhleSBhcmUgaW4gdGhlIG9yaWdpbmFsIGRpc3RyaWJ1dGlvbi4gIElmIGFueSBuZXcgc2NyZWVucyBhcmUgYWRkZWQgeW91IG11c3QgaW5jbHVkZSB0aGUgVXN0YWQgTW9iaWxlIGxvZ28gYXMgaXQgaGFzIGJlZW4gdXNlZCBpbiB0aGUgb3JpZ2luYWwgZGlzdHJpYnV0aW9uLiAgWW91IG1heSBub3QgY3JlYXRlIGFueSBuZXcgZnVuY3Rpb25hbGl0eSB3aG9zZSBwdXJwb3NlIGlzIHRvIGRpbWluaXNoIG9yIHJlbW92ZSB0aGUgVXN0YWQgTW9iaWxlIExvZ28uICBZb3UgbXVzdCBsZWF2ZSB0aGUgVXN0YWQgTW9iaWxlIGxvZ28gYXMgdGhlIGxvZ28gZm9yIHRoZSBhcHBsaWNhdGlvbiB0byBiZSB1c2VkIHdpdGggYW55IGxhdW5jaGVyIChlLmcuIHRoZSBtb2JpbGUgYXBwIGxhdW5jaGVyKS4gIAoKSWYgeW91IG5lZWQgYSBjb21tZXJjaWFsIGxpY2Vuc2UgdG8gcmVtb3ZlIHRoZXNlIHJlc3RyaWN0aW9ucyBwbGVhc2UgY29udGFjdCB1cyBieSBlbWFpbGluZyBpbmZvQHVzdGFkbW9iaWxlLmNvbSAKCi0tPgoKKi8KCi8vIFN0aWxsIGRldmVsb3BpbmcuLgoKLy9EbyBub3QgY2hhbmdlLSB3aWxsIGJlIHJlZ2VuZXJhdGVkCgoKdXN0YWRBcHBQYXRoID0gIi9ibGFoL2JsYWgiOwoKLy91c3RhZFRoZW1lRGlyID0gCgovL2RvY3VtZW50LmxvY2F0aW9uLmhyZWYKCgoK", "ustadmobile-constants.js"];
var ustadmobilegetpackagesjs = ["IC8qCiAgICA8IS0tIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFVzdGFkIE1vYmlsZS4gIAogICAgCiAgICBVc3RhZCBNb2JpbGUgQ29weXJpZ2h0IChDKSAyMDExLTIwMTMgVG91Z2hyYSBUZWNobm9sb2dpZXMgRlogTExDLgoKICAgIFVzdGFkIE1vYmlsZSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24gd2l0aCB0aGUgZm9sbG93aW5nIGFkZGl0aW9uYWwgdGVybXM6CiAgICAKICAgIEFsbCBuYW1lcywgbGlua3MsIGFuZCBsb2dvcyBvZiBVc3RhZCBNb2JpbGUgYW5kIFRvdWdocmEgVGVjaG5vbG9naWVzIEZaIAogICAgTExDIG11c3QgYmUga2VwdCBhcyB0aGV5IGFyZSBpbiB0aGUgb3JpZ2luYWwgZGlzdHJpYnV0aW9uLiAgSWYgYW55IG5ldwogICAgc2NyZWVucyBhcmUgYWRkZWQgeW91IG11c3QgaW5jbHVkZSB0aGUgVXN0YWQgTW9iaWxlIGxvZ28gYXMgaXQgaGFzIGJlZW4KICAgIHVzZWQgaW4gdGhlIG9yaWdpbmFsIGRpc3RyaWJ1dGlvbi4gIFlvdSBtYXkgbm90IGNyZWF0ZSBhbnkgbmV3IAogICAgZnVuY3Rpb25hbGl0eSB3aG9zZSBwdXJwb3NlIGlzIHRvIGRpbWluaXNoIG9yIHJlbW92ZSB0aGUgVXN0YWQgTW9iaWxlIAogICAgTG9nby4gIFlvdSBtdXN0IGxlYXZlIHRoZSBVc3RhZCBNb2JpbGUgbG9nbyBhcyB0aGUgbG9nbyBmb3IgdGhlIAogICAgYXBwbGljYXRpb24gdG8gYmUgdXNlZCB3aXRoIGFueSBsYXVuY2hlciAoZS5nLiB0aGUgbW9iaWxlIGFwcCBsYXVuY2hlcikuICAKICAgIAogICAgSWYgeW91IHdhbnQgYSBjb21tZXJjaWFsIGxpY2Vuc2UgdG8gcmVtb3ZlIHRoZSBhYm92ZSByZXN0cmljdGlvbiB5b3UgbXVzdAogICAgY29udGFjdCB1cy4gIAogICAgCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uCgogICAgVXN0YWQgTW9iaWxlIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCgoKClRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlLiAgSXQgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEdOVSBHRU5FUkFMIFBVQkxJQyBMSUNFTlNFICggaHR0cDovL3d3dy5nbnUub3JnL2NvcHlsZWZ0L2dwbC5odG1sICkgd2l0aCB0aGUgZm9sbG93aW5nIAoKR1BMIExpY2Vuc2UgQWRkaXRpb25hbCBUZXJtcwoKQWxsIG5hbWVzLCBsaW5rcywgYW5kIGxvZ29zIG9mIFVzdGFkIE1vYmlsZSBhbmQgVG91Z2hyYSBUZWNobm9sb2dpZXMgRlogTExDIG11c3QgYmUga2VwdCBhcyB0aGV5IGFyZSBpbiB0aGUgb3JpZ2luYWwgZGlzdHJpYnV0aW9uLiAgSWYgYW55IG5ldyBzY3JlZW5zIGFyZSBhZGRlZCB5b3UgbXVzdCBpbmNsdWRlIHRoZSBVc3RhZCBNb2JpbGUgbG9nbyBhcyBpdCBoYXMgYmVlbiB1c2VkIGluIHRoZSBvcmlnaW5hbCBkaXN0cmlidXRpb24uICBZb3UgbWF5IG5vdCBjcmVhdGUgYW55IG5ldyBmdW5jdGlvbmFsaXR5IHdob3NlIHB1cnBvc2UgaXMgdG8gZGltaW5pc2ggb3IgcmVtb3ZlIHRoZSBVc3RhZCBNb2JpbGUgTG9nby4gIFlvdSBtdXN0IGxlYXZlIHRoZSBVc3RhZCBNb2JpbGUgbG9nbyBhcyB0aGUgbG9nbyBmb3IgdGhlIGFwcGxpY2F0aW9uIHRvIGJlIHVzZWQgd2l0aCBhbnkgbGF1bmNoZXIgKGUuZy4gdGhlIG1vYmlsZSBhcHAgbGF1bmNoZXIpLiAgCgpJZiB5b3UgbmVlZCBhIGNvbW1lcmNpYWwgbGljZW5zZSB0byByZW1vdmUgdGhlc2UgcmVzdHJpY3Rpb25zIHBsZWFzZSBjb250YWN0IHVzIGJ5IGVtYWlsaW5nIGluZm9AdXN0YWRtb2JpbGUuY29tIAoKLS0+CjwhLS0KICAgVGhpcyBpcyB0aGUgamF2YXNyaXB0IHRoYXQgYWNjb21wYW5pZXMgdGhlIHBhZ2Ugd2hlcmUgdXNlciByZXF1ZXN0cyBmb3IgYSBsaXN0IG9mIHVzdGFkIG1vYmlsZSBwYWNrYWdlcyBhdmFpbGFibGUgYW5kIGlzIGFibGUgdG8gc2VsZWN0IGFuZCBmZXRjaCBhbGwgdGhlIGZpbGVzIHN1Y2ggdGhhdCBpdCB3aWxsIGJlIGF2YWlsYWJsZSBPdmVyIFRoZSBBaXIgb24gdGhlIGRldmljZSBpdHNlbGYuIAotLT4KKi8KICAgIHZhciBnbG9iYWxYTUxMaXN0Rm9sZGVyTmFtZSA9ICJhbGwiOwogICAgdmFyIHJvb3RQYXRoOyAvL0RvZXNuJ3QgY2hhbmdlIHRocm91Z2hvdXQgdGhlIHByb2dyYW0uCiAgICB2YXIgcm9vdFVSTDsgLy9CQjEwIHJvb3QgaXMgc2xpZ2h0bHkgZGlmZmVyZW50LgogICAgdmFyIHVtZ3BQbGF0Zm9ybTsKICAgIHZhciBmaWxlTmFtZSA9ICIiOyAvL2ZpbGVOYW1lIGVpdGhlciBMaXN0IG9mIFBhY2thZ2VzIG9yIHRoZSBQYWNrYWdlcyBpdCBzZWxmLgogICAgdmFyIHBhY2thZ2VTdHJpbmcgPSAiIjsgLy9lZzogaHR0cDovL3d3dy51c3RhZG1vYmlsZS9ib29rcy9UZXN0UGFja2FnZTNfdXN0YWRwa2dfaHRtbDUueG1sCiAgICB2YXIgcGFja2FnZUZvbGRlck5hbWUgPSAiIjsgLy8gZWc6IFRlc3RQYWNrYWdlMwogICAgdmFyIGFsbEZpbGVEb3dubG9hZENhbGxiYWNrID0gbnVsbDsKCiAgICB2YXIgcGFja2FnZUxpc3RTdHJpbmcgPSAiaHR0cDovL3d3dy51c3RhZG1vYmlsZS5jb20vYm9va3MvYWxsX3VzdGFkcGtnX2h0bWw1LnhtbCI7IC8vIEluIGZ1dHVyZSB3aWxsIGJlIGEgdmFyaWFibGUgdGhhdCBNYW5hZ2VycyBjYW4gc2V0LgogICAgdmFyIHBhY2thZ2VMaXN0RmlsZU5hbWUgPSAiIjsgLy8gVGhpcyBjaGFuZ2VzLiBlZzogYWxsX3VzdGFkcGtnX2h0bWw1LnhtbAogICAgdmFyIHBhY2thZ2VMaXN0Rm9sZGVyTmFtZSA9ICIiOyAvLyBlZzogYWxsOiBIb3dldmVyIHlvdSBhbmQgeW91ciBzZXJ2ZXIgbWlnaHQgZGVmaW5lLiBIZXJlIHdpdGggdXN0YWRtb2JpbGUuY29tIHNlcnZlciBkZWZpbmVkIGFzICJhbGwiLgoKICAgIC8vbGlzdCBvZiBmaWxlcyB0aGF0IG5lZWQgZG93bmxvYWRlZAogICAgdmFyIGZpbGVEb3dubG9hZExpc3Q7CgogICAgLy9GaWxlIGluZGV4IGFzIHdlIGdvIHRocm91Z2ggdGhlIGRvd25sb2Fkcy4KICAgIHZhciBjdXJyZW50RmlsZURvd25sb2FkSW5kZXggPSAwOwoKICAgIHZhciBmaWxlWE1MQ2FsbGJhY2sgPSBudWxsOwogICAgdmFyIHBhY2thZ2VYTUxDYWxsYmFjayA9IG51bGw7CgogICAgLyogR2VuZXJhbCwgYWxsIHB1cnBvc2UgZmFpbCBmdW5jdGlvbi4qLwogICAgZnVuY3Rpb24gZmFpbDIoKXsKICAgICAgZGVidWdMb2coIlNvbWV0aGluZyB3ZW50IHdyb25nIik7CiAgICAgIGFsZXJ0KCJTb21ldGhpbmcgd2VudCB3cm9uZyIpOy8vZXJyb3J1bmtub3duIChtZXNzYWdlcyBmcm9tIGVuLmpzKQogICAgICAkLm1vYmlsZS5sb2FkaW5nKCdoaWRlJyk7CiAgICB9CgogICAgLyogRG93bmxvYWQgZmFpbCBmdW5jdGlvbiBjYWxsZWQgaW4gYmF0Y2ggZG93bmxvYWQgcHJvY2Vzcy4gSWYgYSBmaWxlIGlzIG5vdCBmb3VuZCwgaXQgd2lsbCBzdGlsbCBjb250aW51ZSB3aXRoIHRoZSBuZXh0IGZpbGUuIiAqLwogICAgZnVuY3Rpb24gZG93bmxvYWRmYWlsKCl7CiAgICAgICAgZGVidWdMb2coIiFEb3dubG9hZCBGYWlsZWQuIik7CiAgICAgICAgZGVidWdMb2coIlRyeWluZyB0aGUgbmV4dCBmaWxlLi4iKTsKICAgICAgICBkb3dubG9hZE5leHRGaWxlKCk7ICAgICAgICAKICAgIH0KICAgIAogICAgLyogRG93bmxvYWQgZmFpbCBmdW5jdGlvbiB3aGVuIG9uZSBmaWxlIChMaXN0IHhtbCBvciBQYWNrYWdlIHhtbCkgZmlsZSBpcyB1bmFibGUgdG8gYmUgZG93bmxvYWRlZC4gKi8KICAgIGZ1bmN0aW9uIGRvd25sb2FkZmFpbChjdXJyZW50RmlsZU4pewogICAgICAgIGRlYnVnTG9nKCIhQ291bGRuIG5vdCBkb3dubG9hZCBhIGZpbGU6ICIgKyBjdXJyZW50RmlsZU4pOyAgICAgICAgCiAgICAgICAgYWxlcnQoIkNvdWxkIG5vdCBkb3dubG9hZCB0aGUgZmlsZS4gQ2hlY2sgaWYgcGF0aCBpcyBjb3JyZWN0IG9uIHRoZSBzZXJ2ZXIgbGlzdC4iKTsKICAgIH0KCgogICAgLyogVGhlIHN0YXJ0aW5nIGZ1bmN0aW9uIHRvIExpc3QgYWxsIFBhY2thZ2VzIGZyb20gdGhlIHNlcnZlciB1cmwgbWVudGlvbmVkIGdsb2JhbGx5OiBwYWNrYWdlTGlzdFN0cmluZy4gCiAgICAgICAgLy8xLiBEb3dubG9hZCBhbiB4bWwgZnJvbSB0aGUgc2VydmVyIHVybC4KICAgICAgICAvLzIuIE9wZW4gaXMgYW5kIGxpc3QgaXQuCiAgICAgICAgLy8zLiBBcyB3ZSBnbyB0aHJvdWdoLCB3ZSBtYWtlIGEgbGlzdC4KICAgICAgICAvLzQuIFRoZSBsaW5rIG9mIHRoZSBsaXN0IGlzIHRvIGRvd25sb2FkIHRoZSBmaWxlLgogICAgICAgIC8vNS4gQSBkaWFsb2cgYm94IGNvbmZpcm1pbmcgZG93bmxvYWQobWF5YmUgU2l6ZSBwYXJhbWV0ZXI/KQogICAgICAgIC8vNi4gV2hlbiBjb25maXJtZWQsIHRoZSBYTUwgZG93bmxvYWQgaXMgY2FsbGVkIGFuZCB0aGVuIHRoZSBYTUwgcHJvY2Vzc2luZyBmdW5jdGlvbiB0b28uIFRoZW4gRG9uZS4KICAgICAgICAvLzcuIEhhdmUgYSBsaW5rPCBCYWNrIHRvIEJvb2svUGFja2FnZSBMaXN0LiAgICAKICAgICovCiAgICBmdW5jdGlvbiBsaXN0UGFja2FnZXNGcm9tU2VydmVyKCl7CiAgICAgICAgJC5tb2JpbGUubG9hZGluZygnc2hvdycsIHsKICAgICAgICAgICAgdGV4dDogeF8oJ0NvbnRhY3RpbmcgdGhlIHNlcnZlci4uJyksCiAgICAgICAgICAgIHRleHRWaXNpYmxlOiB0cnVlLAogICAgICAgICAgICB0aGVtZTogJ2InLAogICAgICAgICAgICBodG1sOiAiIn0KICAgICAgICApOwogICAgICAgICQoIiNwYWNrYWdlTGlzdCIpLmVtcHR5KCkuYXBwZW5kKCk7CiAgICAgICAgLy92YXIgc2VydmVydXJsID0gImh0dHA6Ly8iOyAvL0luIGZ1dHVyZSB3ZSBjYW4gdXNlIGl0IGFuZCB3ZSBjYW4gZ2xvYmFsaXNlIGl0LgogICAgICAgIG9uUGFja2FnZUxpc3RUcmFuc2ZlcigpOyAgICAgCiAgICB9CiAgICAvLyBDaGVjayB0byBzZWUgaWYgQ29yZG92YSBpcyByZWFkeSBhbmQgZm9sbG93aW5nIGZ1bmN0aW9ucyB0byBnZXQgcm9vdFBhdGggdGhyb3VnaCBmaWxlIFN5c3RlbS4KICAgIC8vIE5lZWRlZCBhcyB0aGlzIHdpbGwgYmUgdGhlIGZpcnN0IGNhbGwgdG8gdGhlIHNlcnZlci4KICAgIGZ1bmN0aW9uIG9uUGFja2FnZUxpc3RUcmFuc2ZlcigpewogICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2RldmljZXJlYWR5JywgYmVnaW5QYWNrYWdlTGlzdFRyYW5zZmVyLCBmdW5jdGlvbigpe2FsZXJ0KCJTb21ldGhpbmcgd2VudCB3cm9uZyBpbiBjaGVja2luZyBDb3Jkb3ZhIHJlYWR5LiIpOyBkZWJ1Z0xvZygiU29tZXRoaW5nIHdlbnQgd3Jvbmcgb24gZGV2aWNlcmVhZHkgYXQgZnVuY3Rpb246IG9uUGFja2FnZUxpc3RUcmFuc2ZlcigpIik7fSk7CiAgICB9CgogICAgZnVuY3Rpb24gYmVnaW5QYWNrYWdlTGlzdFRyYW5zZmVyKCl7CiAgICAgICAgd2luZG93LnJlcXVlc3RGaWxlU3lzdGVtKExvY2FsRmlsZVN5c3RlbS5QRVJTSVNURU5ULCAwLCBnb3RSb290TGlzdERpclBhY2thZ2UsIGZ1bmN0aW9uKCl7YWxlcnQoIlNvbWV0aGluZyB3ZW50IHdyb25nIGluIGdldHRpbmcgdGhlIGZpbGVTeXN0ZW0uIik7IGRlYnVnTG9nKCJTb21ldGhpbmcgd2VudCB3cm9uZyBpbiBnZXR0aW5nIGZpbGUgc3lzdGVtLCBiZWdpblBhY2thZ2VMaXN0VHJhbnNmZXIoKSIpO30pOwogICAgfQoKICAgIC8qCiAgICAgICAgRnVuY3Rpb24gdGhhdCBnZXRzIHRoZSByb290UGF0aCwgZ2V0cyBYTUwgTGlzdCcgZmlsZSBuYW1lIGFuZCBmb2xkZXIgTmFtZSBmb3IgaXQgdG8gYmUgc3RvcmVkIGF0IHRvIGZpbmFsbHkgZG93bmxvYWQgdGhlIG1haW4gcGFja2FnZSBsaXN0IHhtbCBmaWxlLiAKICAgICovCiAgICBmdW5jdGlvbiBnb3RSb290TGlzdERpclBhY2thZ2Uocm9vdEZTKXsKICAgICAgICByb290UGF0aCA9IHJvb3RGUy5yb290LmZ1bGxQYXRoOwogICAgICAgIHJvb3RVUkwgPSByb290RlMucm9vdC50b1VSTCgpOwogICAgICAgIGNvbnNvbGUubG9nKCJyb290UGF0aCBpczogIiArIHJvb3RQYXRoICsgIiBhbmQgcm9vdFVSTCBpczogIiArIHJvb3RVUkwpOwogICAgICAgIHZhciB1cmlTcGxpdCA9IHBhY2thZ2VMaXN0U3RyaW5nLnNwbGl0KCIvIik7CiAgICAgICAgdmFyIGxhc3RQb3MgPSB1cmlTcGxpdC5sZW5ndGggLSAxOwogICAgICAgICAgICBwYWNrYWdlTGlzdEZpbGVOYW1lID0gdXJpU3BsaXRbbGFzdFBvc107ICAgICAgICAKICAgICAgICB2YXIgZmlsZU5hbWVDaGVja0FycmF5ID0gcGFja2FnZUxpc3RGaWxlTmFtZS5zcGxpdCgiX3VzdGFkcGtnIik7CiAgICAgICAgdmFyIHBhY2thZ2VGb2xkZXJOYW1lUG9zID0gZmlsZU5hbWVDaGVja0FycmF5Lmxlbmd0aCAtIDI7CiAgICAgICAgICAgIHBhY2thZ2VMaXN0Rm9sZGVyTmFtZSA9IGZpbGVOYW1lQ2hlY2tBcnJheVtwYWNrYWdlRm9sZGVyTmFtZVBvc107CiAgICAgICAgaWYgKCFwYWNrYWdlTGlzdEZvbGRlck5hbWUpewogICAgICAgICAgICBwYWNrYWdlTGlzdEZvbGRlck5hbWU9IiI7CiAgICAgICAgfQoJCQoJCQoJCQogICAgICAgIHZhciBsYXN0RmlsZU5hbWVQb3MgPSBmaWxlTmFtZUNoZWNrQXJyYXkubGVuZ3RoIC0gMTsKICAgICAgICB2YXIgZmlsZU5hbWVDaGVjayA9IGZpbGVOYW1lQ2hlY2tBcnJheVtsYXN0RmlsZU5hbWVQb3NdOwogICAgICAgIGlmIChmaWxlTmFtZUNoZWNrID09ICJfaHRtbDUueG1sIiApIHsKICAgICAgICAgICAgZGVidWdMb2coIlNwZWNpZmllZCBmaWxlOiAiICsgcGFja2FnZUxpc3RGaWxlTmFtZSArICIgaXMgYW4gdXN0YWRtb2JpbGUgcGFja2FnZSBsaXN0IHhtbC4iKTsKICAgICAgICAgICAgc3RhcnRGaWxlRG93bmxvYWQocGFja2FnZUxpc3RTdHJpbmcsIHBhY2thZ2VMaXN0Rm9sZGVyTmFtZSk7CiAgICAgICAgfQogICAgICAgIGVsc2V7CiAgICAgICAgICAgIGFsZXJ0KCJVbmFibGUgdG8gZmV0Y2ggbGlzdCBvZiBhdmFpbGFibGUgcGFja2FnZXMgb24gdGhlIHNlcnZlci4gQ2hlY2sgaWYgcGF0aCB0byBsaXN0IGlzIGNvcnJlY3Q6IiArIGZpbGVOYW1lQ2hlY2spOwogICAgICAgICAgICBkZWJ1Z0xvZygiSW52YWxpZCBwYWNrYWdlIG5hbWUuIE5vdCBhIHBhY2thZ2UgbGlzdCB4bWwgb3IgZG9lc250IGVuZCB3aXRoIGFsbF91c3RhZHBrZ19odG1sNS4uIik7CiAgICAgICAgfQogICAgfQoKICAgIC8qIAogICAgICAgIEZ1bmN0aW9uIHRoYXQgc3RhcnRzIHRvIGZldGNoIHRoZSBkb3dubG9hZGVkIGZpbGUgYnkgZ2V0aXRuZ3MgaXQgbmFtZSBhbmQgZm9sZGVyIExvY2FsdGlvbiB3aXRoIHJlc3BlY3QgdG8gRGV2aWNlJ3Mgcm9vdCBkaXJlY3RvcnkuCiAgICAqLwogICAgZnVuY3Rpb24gb25saXN0UGFja2FnZXMobXNnKXsKICAgICAgICAkLm1vYmlsZS5sb2FkaW5nKCdzaG93JywgewogICAgICAgICAgICB0ZXh0OiB4XygnTGlzdGluZyB0aGUgYXZhaWxhYmxlIGNvdXJzZXMuLicpLAogICAgICAgICAgICB0ZXh0VmlzaWJsZTogdHJ1ZSwKICAgICAgICAgICAgdGhlbWU6ICdiJywKICAgICAgICAgICAgaHRtbDogIiIKICAgICAgICB9KTsgICAgICAgICAgCiAgICAgICAgdmFyIHVyaVNwbGl0ID0gcGFja2FnZUxpc3RTdHJpbmcuc3BsaXQoIi8iKTsKICAgICAgICB2YXIgbGFzdFBvcyA9IHVyaVNwbGl0Lmxlbmd0aCAtIDE7CiAgICAgICAgICAgIHBhY2thZ2VMaXN0RmlsZU5hbWUgPSB1cmlTcGxpdFtsYXN0UG9zXTsgIAogICAgICAgIHZhciBmaWxlTmFtZUNoZWNrQXJyYXkgPSBwYWNrYWdlTGlzdEZpbGVOYW1lLnNwbGl0KCJfdXN0YWRwa2ciKTsKICAgICAgICB2YXIgcGFja2FnZUZvbGRlck5hbWVQb3MgPSBmaWxlTmFtZUNoZWNrQXJyYXkubGVuZ3RoIC0gMjsKICAgICAgICAgICAgcGFja2FnZUxpc3RGb2xkZXJOYW1lID0gZmlsZU5hbWVDaGVja0FycmF5W3BhY2thZ2VGb2xkZXJOYW1lUG9zXTsKICAgICAgICBpZiAoIXBhY2thZ2VMaXN0Rm9sZGVyTmFtZSl7CiAgICAgICAgICAgIHBhY2thZ2VMaXN0Rm9sZGVyTmFtZT0iIjsKICAgICAgICB9CiAgICAgICAgd2luZG93LnJlcXVlc3RGaWxlU3lzdGVtKExvY2FsRmlsZVN5c3RlbS5QRVJTSVNURU5ULCAwLCBnZXRYTUxMaXN0RmlsZSwgZnVuY3Rpb24oKXthbGVydCgiU29tZXRoaW5nIHdlbnQgd3JvbmcgaW4gZ2V0dGluZyBmaWxlIFN5c3RlbSBmb3IgcGFja2FnZXMuIik7IGRlYnVnTG9nKCJTb21ldGhpbmcgd2VudCB3cm9uZyBvbiBnZXR0aW5nIGZpbGUgc3lzdGVtIGluIG9ubGlzdFBhY2thZ2VzKG1zZykiKTt9KTsKICAgIH0KCiAgICAvLyBUaGlzIGZ1bmN0aW9uIGNhbGxzIHRoZSBmaWxlIGdldHRpbmcgbWV0aG9kIG9mIEZpbGVFbnRyeS4KICAgIGZ1bmN0aW9uIGdldFhNTExpc3RGaWxlKGZpbGVTeXN0ZW0pewogICAgICAgIC8vYWxlcnQoIm1lc3NhZ2U6ICIgKyBtc2cpOwogICAgICAgIGRlYnVnTG9nKCJHb3QgWE1MIExpc3QgRmlsZVN5c3RlbS4iKTsKICAgICAgICAgICAgcm9vdFBhdGggPSBmaWxlU3lzdGVtLnJvb3QuZnVsbFBhdGg7CiAgICAgICAgdmFyIGZvcnhtbCA9ICJ1c3RhZG1vYmlsZUNvbnRlbnQvIiArIHBhY2thZ2VMaXN0Rm9sZGVyTmFtZSArICIvIiArIHBhY2thZ2VMaXN0RmlsZU5hbWU7CiAgICAgICAgZGVidWdMb2coIlhNTCBMaXN0IFByb2Nlc3Npbmcgc3RhcnRlZC4iKTsKICAgICAgICBkZWJ1Z0xvZygiWE1MIExpc3QgZmlsZSB3YXMgZG93bmxvYWRlZCBmcm9tIFVSTDogIiArIHBhY2thZ2VMaXN0U3RyaW5nICk7CiAgICAgICAgdmFyIHBhdGhUb1BhY2thZ2VGaWxlID0gcm9vdFBhdGggKyAiL3VzdGFkbW9iaWxlQ29udGVudC8iICsgcGFja2FnZUxpc3RGb2xkZXJOYW1lICsgIi8iICsgcGFja2FnZUxpc3RGaWxlTmFtZTsKICAgICAgICBkZWJ1Z0xvZygiVGhlIFhNTCBMaXN0IGxvY2F0aW9uIG9uIHRoZSBkZXZpY2UgaXM6ICIgKyBwYXRoVG9QYWNrYWdlRmlsZSk7ICAgICAgICAgICAgCiAgICAgICAgdmFyIGdldERpciA9ICJ1c3RhZG1vYmlsZUNvbnRlbnQvIiArIHBhY2thZ2VMaXN0Rm9sZGVyTmFtZTsgLy9Ob3RlIGhvdyB0aGVyZSBpcyBubyAiLyIgaW4gdGhlIHN0YXJ0LgogICAgICAgIGRlYnVnTG9nKCJDSEVDS0lORyBJRiBESVJFQ1RPUlk6ICIgKyBnZXREaXIrICIgRVhJU1RTLiBJRiBOT1QsIENSRUFUSU5HIElULiIpOwogICAgICAgIGZpbGVTeXN0ZW0ucm9vdC5nZXREaXJlY3RvcnkoZ2V0RGlyLCB7Y3JlYXRlOnRydWUsIGV4Y2x1c2l2ZTpmYWxzZX0sIGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIGRlYnVnTG9nKCJDcmVhdGluZyBMaXN0IERpciBzdWNjZXNzLiIpOwogICAgICAgICAgICBkZWJ1Z0xvZygiZm9yeG1sIGlzOiAiICsgZm9yeG1sKTsgICAKICAgICAgICAgICAgZGVidWdMb2coIkdFVFRJTkcgVEhFIExJU1QgWE1MISIpOwogICAgICAgICAgICBmaWxlU3lzdGVtLnJvb3QuZ2V0RmlsZShmb3J4bWwsIHtjcmVhdGU6ZmFsc2UsIGV4Y2x1c2l2ZTpmYWxzZX0sZ290WE1MRmlsZUxpc3QsIGZ1bmN0aW9uKCl7YWxlcnQoIlNvbWV0aGluZyB3ZW50IHdyb25nIGluIGdldHRpbmcgZmlsZSBmb3IgWE1MIExpc3QgcHJvY2Vzc2luZy4iKTsgZGVidWdMb2coIlNvbWV0aGluZyB3ZW50IHdyb25nIG9uIGdldHRpbmcgZmlsZSBhdCBnZXRYTUxMaXN0RmlsZShmaWxlU3lzdGVtKSIpO30pOwogICAgICAgIH0sZnVuY3Rpb24oKXtkZWJ1Z0xvZygiQ3JlYXRpbmcgbGlzdCBEaXIgdW5zdWNjZXNzLiIpOyQubW9iaWxlLmxvYWRpbmcoJ2hpZGUnKTthbGVydCgiR2V0dGluZyBQYWNrYWdlcyBMaXN0IG9uIHRvIHlvdXIgZGV2aWNlIGZhaWxlZC4iKTt9KTsKICAgICAgICAKICAgIH0KICAKICAgIGZ1bmN0aW9uIGdvdFhNTEZpbGVMaXN0KGZpbGVFbnRyeSl7CiAgICAgICAgZGVidWdMb2coIkdvdCBYTUwgZmlsZS4iKTsKICAgICAgICBmaWxlRW50cnkuZmlsZShnb3RYTUxMaXN0RmlsZSxmdW5jdGlvbigpe2FsZXJ0KCJTb21ldGhpbmcgd2VudCB3cm9uZyBpbiBnZXR0aW5nIFhNTCBmaWxlIChQYWNrYWdlIExpc3QpIik7IGRlYnVnTG9nKCJTb21ldGhpbmcgd2VudCB3cm9uZyBpbiBnZXR0aW5nIFhNTCBQYWNrYWdlIExpc3Qgb2YgZnVuY3Rpb24gZ290WE1MRmlsZUxpc3QoZmlsZUVudHJ5KSIpO30pOwogICAgfQogICAgCiAgICAvL1JlYWRpbmcgdGhlIHhtbCBsaXN0IGZpbGUuCiAgICBmdW5jdGlvbiBnb3RYTUxMaXN0RmlsZShmaWxlKXsKICAgICAgICAgICAgZGVidWdMb2coIlJlYWRpbmcgdGhlIFhNTCBmaWxlLiIpOwogICAgICAgICAgICB2YXIgeG1sVGFnID0gInBhY2thZ2UiOwogICAgICAgICAgICByZWFkWE1MQXNUZXh0KGZpbGUsIHhtbFRhZyk7CiAgICAgICAgICAgLy9yZWFkWE1MTGlzdEFzVGV4dChmaWxlKTsKICAgIH0KCiAgICAvKiAKICAgICAgICBUaGlzIGZ1bmN0aW9uIHdpbGwgZ28gYWhlYWQgYW5kIGZldGNoIHRoZSB4bWwgZmlsZSBhbmQgdGhlbiBkb3dubG9hZCBhbGwgdGhlIGNvbnRlbnRzIG9mIHRoZSBwYWNrYWdlIHRvIGZvcm0gYSB1c3RhZCBtb2JpbGUgcGFja2FnZS9ib29rIHRoYXQgdGhlIGRldmljZSBjYW4gdGhlbiBhY2Nlc3MgYW5kIGdvIHRocm91Z2guCiAgICAqLwogICAgZnVuY3Rpb24gc29tZVRoaW5nKHhtbFBhdGgpewogICAgICAgIHBhY2thZ2VTdHJpbmcgPSB4bWxQYXRoOwogICAgICAgIGRlYnVnTG9nKCJUaGUgUGFja2FnZSB4bWwgaXM6ICIgKyBwYWNrYWdlU3RyaW5nKTsKICAgICAgICBjdXJyZW50RmlsZURvd25sb2FkSW5kZXggPSAwOwogICAgICAgIHBhY2thZ2VGb2xkZXJOYW1lID0gIiI7CiAgICAgICAgLy9hbGxGaWxlRG93bmxvYWRDYWxsYmFjayA9IG51bGw7CiAgICAgICAgb25QYWNrYWdlVHJhbnNmZXIoKTsgLy8gVGhpcyBmdW5jdGlvbiwgYXMgYWJvdmUgd2lsbCBkb3dubG9hZCB0aGUgcGFja2FnZSB4bWwgd2hlcmUgYWxsIHRoZSBmaWxlIHRvIGJlIGRvd25sb2FkZWQgbGlzdCByZXNpZGUuCiAgICAgICAgCiAgICB9CgogICAgZnVuY3Rpb24gdGVzdFBhY2thZ2VMaXN0WE1MKHVybCxmb2xkZXIsY2FsbGJhY2spewogICAgICAgIGRlYnVnTG9nKCJURVNUOiBJbiB0ZXN0UGFja2FnZUxpc3RYTUwgd2l0aCB1cmw6ICIgKyB1cmwgKyAiLCBmb2xkZXI6ICIgKyBmb2xkZXIpOwogICAgICAgIHBhY2thZ2VTdHJpbmcgPSB1cmw7CiAgICAgICAgcGFja2FnZUZvbGRlck5hbWUgPSBmb2xkZXI7ICAgICAKICAgICAgICBkZWJ1Z0xvZygiVEVTVDogR2xvYmFsIHZhcmlhYmxlcyBwYWNrYWdlU3RyaW5nOiAiICsgcGFja2FnZVN0cmluZyArICIsIGFuZCBwYWNrYWdlRm9sZGVyTmFtZTogIiArIHBhY2thZ2VGb2xkZXJOYW1lKTsgICAgICAgIAogICAgICAgIHdpbmRvdy5yZXF1ZXN0RmlsZVN5c3RlbShMb2NhbEZpbGVTeXN0ZW0uUEVSU0lTVEVOVCwwLCBmdW5jdGlvbihmcyl7CiAgICAgICAgICAgICAgICByb290UGF0aCA9IGZzLnJvb3QuZnVsbFBhdGg7CiAgICAgICAgICAgICAgICBkZWJ1Z0xvZygiVEVTVDogR2xvYmFsIHZhcmlhYmxlLCByb290UGF0aDogIiArIHJvb3RQYXRoKTsKICAgICAgICAgICAgICAgIGRlYnVnTG9nKCJURVNUOiBTdGFydGluZyB0ZXN0IFBhY2thZ2UgTGlzdCBYbWwgZG93bmxvYWQuLiIpOwogICAgICAgICAgICAgICAgc3RhcnRGaWxlRG93bmxvYWQodXJsLCBmb2xkZXIsIGNhbGxiYWNrKTsKICAgICAgICAgICAgfSwgZnVuY3Rpb24oKXsgZGVidWdMb2coInRlc3QgZmFpbCIpOyBydW5jYWxsYmFjayhjYWxsYmFjaywgImZhaWwiKTt9CiAgICAgICAgKTsgICAgICAgIAogICAgCiAgICB9CiAgICAKICAgIC8vQ29yZG92YSBjaGVjayBpZiBkZXZpY2UgaXMgcmVhZHkKICAgIGZ1bmN0aW9uIG9uUGFja2FnZVRyYW5zZmVyKCl7CiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZGV2aWNlcmVhZHknLCBiZWdpblBhY2thZ2VUcmFuc2ZlciwgZnVuY3Rpb24oKXthbGVydCgiU29tZXRoaW5nIHdlbnQgd3JvbmcgaW4gY2hlY2tpbmcgQ29yZG92YSByZWFkeS4iKTsgZGVidWdMb2coIlNvbWV0aGluZyB3ZW50IHdyb25nIG9uIGRldmljZXJlYWR5IGF0IGZ1bmN0aW9uOiBvblBhY2thZ2VUcmFuc2ZlcigpIik7fSk7CiAgICB9CiAgICAKICAgIC8vQ29yZG92YSBnZXQgRmlsZSBTeXN0ZW0KICAgIGZ1bmN0aW9uIGJlZ2luUGFja2FnZVRyYW5zZmVyKCl7CiAgICAgICAgd2luZG93LnJlcXVlc3RGaWxlU3lzdGVtKExvY2FsRmlsZVN5c3RlbS5QRVJTSVNURU5ULCAwLCBnb3RSb290RGlyUGFja2FnZSwgZnVuY3Rpb24oKXthbGVydCgiU29tZXRoaW5nIHdlbnQgd3JvbmcgaW4gZ2V0dGluZyBGaWxlIFN5c3RlbSBvZiBQYWNrYWdlIFhNTCIpOyBkZWJ1Z0xvZygiU29tZXRoaW5nIHdlbnQgd3JvbmcgaW4gYmVnaW5QYWNrYWdlVHJhbnNmZXIoKSIpO30pOwogICAgfQoKICAgIC8qIEdldHMgdGhlIHJvb3QgcGF0aCBhbmQgaW5pdGlhdGVzIHBhY2thZ2VTdHJpbmcgeG1sIGZpbGUgdG8gYmUgZG93bmxvYWRlZCAoc2V0IHByZXZpb3VzbHkpIHRvIGNhbGN1bGF0ZWQgZm9sZGVyLiovCiAgICBmdW5jdGlvbiBnb3RSb290RGlyUGFja2FnZShmaWxlU3lzdGVtKXsKCQlyb290UGF0aCA9IGZpbGVTeXN0ZW0ucm9vdC5mdWxsUGF0aDsgLy8gR2xvYmFsIHJvb3QgcGF0aCBnb3R0ZW4uCgkJLy9wYWNrYWdlU3RyaW5nIHdpbGwgYmUgc2V0IGJ5IGFub3RoZXIgZnVuY3Rpb24gZnJvbSB4bWwgcGFja2FnZSBsaXN0LgogICAgICAgIGRlYnVnTG9nKCJwYWNrYWdlU3RyaW5nOiAiICsgcGFja2FnZVN0cmluZyk7CiAgICAgICAgLy9Mb2dpYyB0byBnZXQgdGhlIGZpbGUgbmFtZSBmcm9tIHRoZSB1cmwKICAgICAgICB2YXIgdXJpU3BsaXQgPSBwYWNrYWdlU3RyaW5nLnNwbGl0KCIvIik7CiAgICAgICAgdmFyIGxhc3RQb3MgPSB1cmlTcGxpdC5sZW5ndGggLSAxOwogICAgICAgICAgICBmaWxlTmFtZSA9IHVyaVNwbGl0W2xhc3RQb3NdOyAgICAgICAgCiAgICAgICAgZGVidWdMb2coIlRoZSBmaWxlTmFtZSBpbiBnb3RSb290RGlyUGFja2FnZTogIiArIGZpbGVOYW1lKTsgCiAgICAgICAgLy9Mb2dpYyB0byBnZXQgdGhlIGZvbGRlciBuYW1lIC8gcGFja2FnZSBuYW1lIGZyb20gdGhlIHVybCdzIGZpbGUgbmFtZS4KICAgICAgICB2YXIgZmlsZU5hbWVDaGVja0FycmF5ID0gZmlsZU5hbWUuc3BsaXQoIl91c3RhZHBrZyIpOwogICAgICAgIHZhciBwYWNrYWdlRm9sZGVyTmFtZVBvcyA9IGZpbGVOYW1lQ2hlY2tBcnJheS5sZW5ndGggLSAyOwogICAgICAgICAgICBwYWNrYWdlRm9sZGVyTmFtZSA9IGZpbGVOYW1lQ2hlY2tBcnJheVtwYWNrYWdlRm9sZGVyTmFtZVBvc107CiAgICAgICAgaWYgKCFwYWNrYWdlRm9sZGVyTmFtZSl7CiAgICAgICAgICAgIHBhY2thZ2VGb2xkZXJOYW1lPSIiOwogICAgICAgIH0KICAgICAgICAgICAgcGFja2FnZUZvbGRlck5hbWUgPSBnbG9iYWxYTUxMaXN0Rm9sZGVyTmFtZSArICIvIiArIHBhY2thZ2VGb2xkZXJOYW1lOwoKCQlkZWJ1Z0xvZygiQ3JlYXRpbmcgUGFja2FnZSBYTUwgRGlyZWN0b3J5Li4iKTsKCQkJdmFyIHBhY2thZ2VYTUxEaXIgPSAidXN0YWRtb2JpbGVDb250ZW50LyIgKyBwYWNrYWdlRm9sZGVyTmFtZTsKCQkJZGVidWdMb2coIkNIRUNLSU5HIElGIERJUkVDVE9SWTogIiArIHBhY2thZ2VYTUxEaXIgKyAiIEVYSVNUUy4gSUYgTk9ULCBDUkVBVElORyBJVC4iKTsKCQkJZmlsZVN5c3RlbS5yb290LmdldERpcmVjdG9yeShwYWNrYWdlWE1MRGlyLCB7Y3JlYXRlOnRydWUsIGV4Y2x1c2l2ZTpmYWxzZX0sIGZ1bmN0aW9uKCl7CgkJCQkJZGVidWdMb2coIiBDcmVhdGluZyBwYWNrYWdlIFhNTCBEaXJlY3Rvcnkgc3VjY2Vzcy4iKTsKCQkJCQkKCQkJCQlkZWJ1Z0xvZygicGFja2FnZUZvbGRlck5hbWU6ICIgKyBwYWNrYWdlRm9sZGVyTmFtZSk7CgkJCQkJdmFyIGxhc3RGaWxlTmFtZVBvcyA9IGZpbGVOYW1lQ2hlY2tBcnJheS5sZW5ndGggLSAxOwoJCQkJCXZhciBmaWxlTmFtZUNoZWNrID0gZmlsZU5hbWVDaGVja0FycmF5W2xhc3RGaWxlTmFtZVBvc107CgkJCQkJaWYgKGZpbGVOYW1lQ2hlY2sgPT0gIl9odG1sNS54bWwiICkgey8vQ2hlY2sgaWYgaXQgaXMgYSB2YWxpZCBuYW1lZCB4bWwuCgkJCQkJLy9pZiAoZmlsZU5hbWVDaGVjayAhPSBudWxsKXsKCQkJCQkgIGRlYnVnTG9nKCJTcGVjaWZpZWQgZmlsZTogIiArIGZpbGVOYW1lICsgIiBpcyBhbiB1c3RhZG1vYmlsZSBwYWNrYWdlIHhtbC4iKTsKCQkJCQkgIC8vc3RhcnRGaWxlRG93bmxvYWQocGFja2FnZVN0cmluZywiIik7CgkJCQkJCXN0YXJ0RmlsZURvd25sb2FkKHBhY2thZ2VTdHJpbmcsIHBhY2thZ2VGb2xkZXJOYW1lKTsKCQkJCQl9CgkJCQkJZWxzZXsKCQkJCQkgIGFsZXJ0KCJTb3JyeSwgcGxlYXNlIGlucHV0IGEgdmFsaWQgdXN0YWRtb2JpbGUgeG1sLCAiICsgZmlsZU5hbWVDaGVjayk7CgkJCQkJICBkZWJ1Z0xvZygiSW52YWxpZCBwYWNrYWdlIG5hbWUuIE5vdCBhbiB4bWwgb3IgZG9lc250IGVuZCB3aXRoIHVzdGFkcGtnX2h0bWw1Li4iKTsKCQkJCQl9CgkJCQkJCgkJCQl9LCBmdW5jdGlvbigpe2RlYnVnTG9nKCJDcmVhdGluZyBwYWNrYWdlIFhNTCBEaXIgdW5zdWNjZXNzLiIpOyQubW9iaWxlLmxvYWRpbmcoJ2hpZGUnKTsgYWxlcnQoIlVuYWJsZSB0byBkb3dubG9hZCBwYWNrYWdlIHRvIHlvdXIgZGV2aWNlIGFuZCBmaWxlIHN5c3RlbS4iKTt9KTsKCQkKCQkKCQkKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgIH0KCiAgICBmdW5jdGlvbiBydW5jYWxsYmFjayhjYWxsYmFja2Z1bmN0aW9uLCBhcmcpIHsKICAgICAgICBpZihjYWxsYmFja2Z1bmN0aW9uICE9bnVsbCAmJiB0eXBlb2YgY2FsbGJhY2tmdW5jdGlvbiA9PT0gImZ1bmN0aW9uIil7CiAgICAgICAgICAgIGRlYnVnTG9nKCJXaXRoaW4gdGhlIGNhbGwgYmFjayBmdW5jdGlvbiB3aXRoIGFyZzogIiArIGFyZyApOwogICAgICAgICAgICBjYWxsYmFja2Z1bmN0aW9uKGFyZyk7ICAgCiAgICAgICAgfQogICAgfSAgICAKCiAgICAvKkFjdHVhbCBkb3dubG9hZCBmdW5jdGlvbiB0aGF0IGRvd25sb2FkcyBhIGZpbGUgZ2l2ZW4gdG8gaXQgdG8gYSBmb2xkZXIgd2hpY2ggaXMgYWxzbyBnaXZlIHRvIGl0LiovCiAgICBmdW5jdGlvbiBzdGFydEZpbGVEb3dubG9hZChmaWxlVG9Eb3dubG9hZCwgZm9sZGVyTmFtZSwgY2FsbGJhY2spewogICAgICAgIGNvbnNvbGUubG9nKCJURVNUUzE6IGZvbGRlck5hbWU6ICIgKyBmb2xkZXJOYW1lKTsKICAgICAgICBjb25zb2xlLmxvZygiVEVTVFMxOiBwYWNrYWdlRm9sZGVyTmFtZTogIiArIHBhY2thZ2VGb2xkZXJOYW1lKTsKICAgICAgICB2YXIgdXJpU3BsaXQgPSBmaWxlVG9Eb3dubG9hZC5zcGxpdCgiLyIpOwogICAgICAgIHZhciBsYXN0UG9zID0gdXJpU3BsaXQubGVuZ3RoIC0gMTsKICAgIAogICAgICAgIC8vY2hhbmdlcyA5RGVjMjAxMwogICAgICAgIHZhciBmaWxlRnVsbFBhdGggPSB1cmlTcGxpdFtsYXN0UG9zXTsKICAgICAgICB2YXIgZmlsZUZvbGRlciA9IHVyaVNwbGl0W2xhc3RQb3MtMV07CiAgICAgICAgaWYgKCB0eXBlb2YgZmlsZUZvbGRlciA9PT0gJ3VuZGVmaW5lZCcpewogICAgICAgICAgICAvL0RvIG5vdGhpbmcuCiAgICAgICAgfWVsc2V7CiAgICAgICAgICAgIGRlYnVnTG9nKCJTYXZpbmcgY3VycmVudCBmaWxlIHRvIENvdXJzZSBGb2xkZXI6ICIgKyBmaWxlRm9sZGVyKTsKICAgICAgICB9CiAgICAgICAgLy9lbmQgb2YgY2hhbmdlcyA5RGVjMjAxMwoKICAgICAgICAvL2ZpbGVOYW1lID0gdXJpU3BsaXRbbGFzdFBvc107CiAgICAgICAgdmFyIGN1cnJlbnRGaWxlTmFtZSA9IHVyaVNwbGl0W2xhc3RQb3NdOyAgICAgICAgCiAgICAgICAgLy9qUXVlcnkgbW9iaWxlIGxvYWRpbmcgYW5pbWF0aW9uLgogICAgICAgICQubW9iaWxlLmxvYWRpbmcoJ3Nob3cnLCB7CiAgICAgICAgICAgIHRleHQ6IHhfKCdEb3dubG9hZGluZyBVTSBDb3Vyc2U6JykgKyBjdXJyZW50RmlsZU5hbWUgKyB4XygnIGluICcpICsgZm9sZGVyTmFtZSwKICAgICAgICAgICAgdGV4dFZpc2libGU6IHRydWUsCiAgICAgICAgICAgIHRoZW1lOiAnYicsCiAgICAgICAgICAgIGh0bWw6ICIifSk7CiAgICAgICAgZGVidWdMb2coIiBEb3dubG9hZGluZyB0aGUgZmlsZTogIiArIGZpbGVUb0Rvd25sb2FkICsgIiB0byBmb2xkZXI6ICIgKyByb290UGF0aCArICIvdXN0YWRtb2JpbGVDb250ZW50LyIgKyBmb2xkZXJOYW1lKTsKICAgICAgICB2YXIgZmlsZVBhdGhEb3dubG9hZCA9ICIiOyAvL251bGxpZnkgdGhlIHBhdGggZm9yIGV2ZXJ5IGRvd25sb2FkLgogICAgICAgIHVyaSA9IGVuY29kZVVSSShmaWxlVG9Eb3dubG9hZCk7IC8vbmVlZGVkIGJ5IGZpbGVUcmFuc2ZlciBDb3Jkb3ZhIEFQSS4KICAgICAgICBpZiAoZm9sZGVyTmFtZSA9PSAiIil7CiAgICAgICAgICAgIC8vZmlsZVRvRG93bmxvYWQgPSAiaHR0cDovL3d3dy51c3RhZG1vYmlsZS5jb20vYm9va3MvIiArIGN1cnJlbnRGaWxlTmFtZTsKICAgICAgICAgICAgZmlsZVBhdGhEb3dubG9hZCA9IHJvb3RQYXRoICsgIi91c3RhZG1vYmlsZUNvbnRlbnQvIiArIGN1cnJlbnRGaWxlTmFtZTsKICAgICAgICB9ZWxzZXsgLy9JZiBkb3dubG9hZGluZyB0aGUgYWN0dWFsIGNvdXJzZS4KICAgICAgICAgICAgCiAgICAgICAgICAgIGlmKHR5cGVvZiBmaWxlRm9sZGVyID09PSAndW5kZWZpbmVkJyl7ICAgLy8wOTEyMjAxMwogICAgICAgICAgICAgICAgZmlsZVRvRG93bmxvYWQgPSAiaHR0cDovL3d3dy51c3RhZG1vYmlsZS5jb20vYm9va3MvIiArIGZvbGRlck5hbWUgKyAiLyIgKyBjdXJyZW50RmlsZU5hbWU7CiAgICAgICAgICAgICAgICBmaWxlUGF0aERvd25sb2FkID0gcm9vdFBhdGggKyAiL3VzdGFkbW9iaWxlQ29udGVudC8iICsgZm9sZGVyTmFtZSArICIvIiArIGN1cnJlbnRGaWxlTmFtZTsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJmaWxlVG9Eb3dubG9hZDogIiArIGZpbGVUb0Rvd25sb2FkICsgIiBmaWxlUGF0aERvd25sb2FkOiAiICsgZmlsZVBhdGhEb3dubG9hZCk7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygiVEVTVFM6IGZvbGRlck5hbWU6ICIgKyBmb2xkZXJOYW1lKTsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJURVNUUzogcGFja2FnZUZvbGRlck5hbWU6ICIgKyBwYWNrYWdlRm9sZGVyTmFtZSk7CiAgICAgICAgICAgIH1lbHNleyAgLy8wOTEyMjAxMwogICAgICAgICAgICAgICAgaWYoZmlsZUZvbGRlciAhPSAiYm9va3MiICYmIGN1cnJlbnRGaWxlTmFtZSAhPSAiYWxsX3VzdGFkcGtnX2h0bWw1LnhtbCIpewoJCQkJCS8vV2luZG93cyBQaG9uZSBzcGVjaWZpYyBjb2RlIHRvIG1ha2UgdGhhdCBmb2xkZXIuCgkJCQkJdmFyIGdldERpciA9IGZpbGVGb2xkZXI7CgkJCQkJZGVidWdMb2coIkNoZWNraW5nIGlmIERpcmVjdG9yeTogIiArIGZpbGVGb2xkZXIgKyAiIGV4aXN0cy4gSWYgbm90LCBjcmVhdGluZyBpdC4iKTsKCQkJCQlnZXREaXIgPSAidXN0YWRtb2JpbGVDb250ZW50LyIgKyBmb2xkZXJOYW1lICsgIi8iICsgZmlsZUZvbGRlcjsKCQkJCQlmaWxlU3lzdGVtLnJvb3QuZ2V0RGlyZWN0b3J5KGdldERpciwge2NyZWF0ZTp0cnVlLCBleGNsdXNpdmU6IGZhbHNlfSwgZnVuY3Rpb24oKXsKCQkJCQkJZGVidWdMb2coIkNyZWF0aW9uIG9mIGZvbGRlcjogIiArIGZpbGVGb2xkZXIgKyAiIGluIENvdXJzZSBmb2xkZXIgaXMgYSBzdWNjZXNzLiIpO30sIGZ1bmN0aW9uKCl7ZGVidWdMb2coIkNyZWF0aW9uIG9mIGZvbGRlcjogIiArIGZpbGVGb2xkZXIgKyAiIGluIENvdXJzZSBmb2xkZXIgZmFpbGVkISIpO30pOwoJCQkKICAgICAgICAgICAgICAgICAgICBmaWxlVG9Eb3dubG9hZCA9ICJodHRwOi8vd3d3LnVzdGFkbW9iaWxlLmNvbS9ib29rcy8iICsgZm9sZGVyTmFtZSArICIvIiArIGZpbGVGb2xkZXIgKyAiLyIgKyBjdXJyZW50RmlsZU5hbWU7CiAgICAgICAgICAgICAgICAgICAgZGVidWdMb2coIlNhdmluZyBmaWxlOiAiICsgY3VycmVudEZpbGVOYW1lICsgIiB0byBjb3Vyc2UgZm9sZGVyOiAiICsgZmlsZUZvbGRlcik7CiAgICAgICAgICAgICAgICAgICAgZmlsZVBhdGhEb3dubG9hZCA9IHJvb3RQYXRoICsgIi91c3RhZG1vYmlsZUNvbnRlbnQvIiArIGZvbGRlck5hbWUgKyAiLyIgKyBmaWxlRm9sZGVyICsgIi8iICsgY3VycmVudEZpbGVOYW1lOwogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJmaWxlVG9Eb3dubG9hZDogIiArIGZpbGVUb0Rvd25sb2FkICsgIiBmaWxlUGF0aERvd25sb2FkOiAiICsgZmlsZVBhdGhEb3dubG9hZCk7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coIlRFU1RTOiBmb2xkZXJOYW1lOiAiICsgZm9sZGVyTmFtZSk7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coIlRFU1RTOiBwYWNrYWdlRm9sZGVyTmFtZTogIiArIHBhY2thZ2VGb2xkZXJOYW1lKTsKICAgICAgICAgICAgICAgIH1lbHNleyAgICAgIC8vVHJpZ2dlcmVkIG9uIExpc3QgQ291cnNlcyBmcm9tIFNlcnZlciBidXR0b24uCiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coIkdldHRpbmcgY291cnNlIGxpc3QgcGFydC4uIik7CiAgICAgICAgICAgICAgICAgICAgZmlsZVBhdGhEb3dubG9hZCA9IHJvb3RQYXRoICsgIi91c3RhZG1vYmlsZUNvbnRlbnQvIiArIGZvbGRlck5hbWUgKyAiLyIgKyBjdXJyZW50RmlsZU5hbWU7CiAgICAgICAgICAgICAgICAgICAgaWYobmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCJTYWZhcmkiKSAhPT0gLTEgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCJCQjEwIikgIT09IC0xKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVtZ3BQbGF0Zm9ybSA9ICJiYjEwIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vaWYgYmIxMDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVQYXRoRG93bmxvYWQgPSByb290VVJMICsgIi91c3RhZG1vYmlsZUNvbnRlbnQvIiArIGZvbGRlck5hbWUgKyAiLyIgKyBjdXJyZW50RmlsZU5hbWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWJ1Z0xvZygiTGlzdGluZyBDb3Vyc2VzIGZyb20gU2VydmVyOiBEZXRlY3RlZCBCbGFja2JlcnJ5IDEwIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygiZmlsZVRvRG93bmxvYWQoaW4pOiAiICsgZmlsZVRvRG93bmxvYWQgKyAiIGZpbGVQYXRoRG93bmxvYWQ6ICIgKyBmaWxlUGF0aERvd25sb2FkKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coImZpbGVUb0Rvd25sb2FkKG91dCk6ICIgKyBmaWxlVG9Eb3dubG9hZCArICIgZmlsZVBhdGhEb3dubG9hZDogIiArIGZpbGVQYXRoRG93bmxvYWQpOwogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJURVNUUzogZm9sZGVyTmFtZTogIiArIGZvbGRlck5hbWUpOwogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJURVNUUzogcGFja2FnZUZvbGRlck5hbWU6ICIgKyBwYWNrYWdlRm9sZGVyTmFtZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gICAvLzA5MTIyMDEzCiAgICAgICAgICAgIHVyaSA9IGVuY29kZVVSSShmaWxlVG9Eb3dubG9hZCk7IC8vbmVlZGVkIGJ5IGZpbGVUcmFuc2ZlciBDb3Jkb3ZhIEFQSS4gLy8wOTEyMjAxMwogICAgICAgIH0KICAgICAgICBkZWJ1Z0xvZygiRmlsZSBQYXRoIHRvIERvd25sb2FkOiAiICsgZmlsZVBhdGhEb3dubG9hZCk7CiAgICAgICAgdmFyIGZpbGVUcmFuc2ZlciA9IG5ldyBGaWxlVHJhbnNmZXIoKTsKICAgICAgICAvLyBVc2luZyBmaWxlVHJhbnNmZXIgQ29yZG92YSBwbHVnaW4uCiAgICAgICAgZmlsZVRyYW5zZmVyLmRvd25sb2FkKAogICAgICAgICAgICB1cmksCiAgICAgICAgICAgIGZpbGVQYXRoRG93bmxvYWQsCiAgICAgICAgICAgIGZ1bmN0aW9uKGVudHJ5KXsKICAgICAgICAgICAgICAgIGFsZXJ0KCJCQjEwIFNVQ0NFU1MhISIpOwogICAgICAgICAgICAgICAgZGVidWdMb2coIkRvd25sb2FkIGNvbXBsZXRlLiBGaWxlIGxvY2F0aW9uIG9uIGRldmljZTogIiArIGVudHJ5LmZ1bGxQYXRoKTsKCiAgICAgICAgICAgICAgICBpZihmb2xkZXJOYW1lID09IGdsb2JhbFhNTExpc3RGb2xkZXJOYW1lKXsgLy9JZiB0aGUgZmlsZSBkb3dubG9hZGVkIGlzIHRoZSBtYWluIHBhY2thZ2UgbGlzdCAoYWxsX3VzdGFkcGtnX2h0bWw1LnhtbCkKICAgICAgICAgICAgICAgICAgICAkLm1vYmlsZS5sb2FkaW5nKCdoaWRlJyk7CiAgICAgICAgICAgICAgICAgICAgLy8gRm9yIHVuaXQgdGVzdGluZyBwdXJwb3Nlcy4uCiAgICAgICAgICAgICAgICAgICAgcGFja2FnZVhNTENhbGxiYWNrID0gY2FsbGJhY2s7CiAgICAgICAgICAgICAgICAgICAgb25saXN0UGFja2FnZXMoImhpIik7IC8vIENhbGxzIGEgbWV0aG9kIHRoYXQgbGlzdHMgdGhlIGF2YWlsYWJsZSBwYWNrYWdlcyBmcm9tIHRoZSBkb3dubG9hZGVkIHhtbCBwYWNrYWdlIGxpc3QgLnhtbCBmaWxlLgoKICAgICAgICAgICAgICAgIH1lbHNlIGlmKGZvbGRlck5hbWUuaW5kZXhPZihnbG9iYWxYTUxMaXN0Rm9sZGVyTmFtZSArICIvIikgIT09IC0xKXsKICAgICAgICAgICAgICAgICAgICAkLm1vYmlsZS5sb2FkaW5nKCdoaWRlJyk7CiAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9IG51bGwgJiYgdHlwZW9mIGNhbGxiYWNrID09PSAiZnVuY3Rpb24iICl7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vYWxlcnQoIlRlc3RpbmcgcGFja2FnZS4uIik7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vRm9yIHRlc3RpbmcgcHVycG9zZXMuLgogICAgICAgICAgICAgICAgICAgICAgICAvL3J1bmNhbGxiYWNrKGNhbGxiYWNrLCAicGFzc2VkIik7CiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVYTUxDYWxsYmFjayA9IGNhbGxiYWNrOwoJCQkJCSAgICByZWFkUGFja2FnZUZpbGUoImhpIik7IC8vIHRoaXMgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgdGhhdCBnb2VzIHRocm91Z2ggdGhlIHBhY2thZ2UgeG1sIGZpbGUgYW5kIGRvd25sb2FkIGV2ZXJ5IGZpbGUgb25lIGJ5IG9uZS4KICAgICAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZvbGRlck5hbWVTaG9ydFNwbGl0ID0gZm9sZGVyTmFtZS5zcGxpdCgiLyIpOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVGb2xkZXJOYW1lID0gZm9sZGVyTmFtZVNob3J0U3BsaXQubGVuZ3RoIC0gMTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZvbGRlck5hbWVTaG9ydCA9IGZvbGRlck5hbWVTaG9ydFNwbGl0W3ZhbHVlRm9sZGVyTmFtZV07CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByPWNvbmZpcm0oIkRvd25sb2FkIFRoaXMgY291cnNlPyAiICsgZm9sZGVyTmFtZVNob3J0KTsKCQkJCQkgICAgaWYgKHI9PXRydWUpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9hbGVydCgicGFja2FnZUZvbGRlck5hbWU6ICIgKyBwYWNrYWdlRm9sZGVyTmFtZSk7CgkJCQkJCSAgICAvLyBJZiB1c2VyIHdhbnRzIHRvIGRvd25sb2FkIHRoaXMgZmlsZSwgdGhlbiBjb2RlIHdpbGwgZ28gaGVyZSwgYW5kCgkJCQkJCSAgICBkZWJ1Z0xvZygiRG93bmxvYWQgaW5pdGlhdGVkLi4iKTsKCQkJCQkJICAgIHJlYWRQYWNrYWdlRmlsZSgiaGkiKTsgLy8gdGhpcyBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCB0aGF0IGdvZXMgdGhyb3VnaCB0aGUgcGFja2FnZSB4bWwgZmlsZSBhbmQgZG93bmxvYWQgZXZlcnkgZmlsZSBvbmUgYnkgb25lLgoJCQkJCSAgICB9ZWxzZXsKCQkJCQkJICAgIGRlYnVnTG9nKCJEb3dubG9hZCBzdGFydCBjYW5jZWxsZWQgYnkgdXNlci4gTm90aGluZyBnb3QgZG93bmxvYWRlZC4iKTsKCQkJCQkgICAgfSAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGRvd25sb2FkTmV4dEZpbGUoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8vYWxlcnQoIkRvd25sb2FkIGNvbXBsZXRlISBQYXRoOiAiICsgZW50cnkuZnVsbFBhdGgpOyAvLyBJZiB5b3UgZXZlciB3YW50IHRvIG5vdGlmeSB0aGUgdXNlciB0aGF0IHRoZSBmaWxlIGhhcyBmaW5pc2hlZCBkb3dubG9hZGluZy4KICAgICAgICAgICAgfSwKICAgICAgICAgICAgZnVuY3Rpb24oZXJyb3IpewogICAgICAgICAgICAgICAgZGVidWdMb2coImRvd25sb2FkIGVycm9yIHNvdXJjZSAiICsgZXJyb3Iuc291cmNlKTsKICAgICAgICAgICAgICAgIGRlYnVnTG9nKCJkb3dubG9hZCBlcnJvciB0YXJnZXQgIiArIGVycm9yLnRhcmdldCk7CiAgICAgICAgICAgICAgICBkZWJ1Z0xvZygidXBsb2FkIGVycm9yIGNvZGUiICsgZXJyb3IuY29kZSk7CiAgICAgICAgICAgICAgICBhbGVydCgiRG93bmxvYWQgZXJyb3IuIE1ha2Ugc3VyZSB0aGF0IHRoZSBmaWxlIGxpbmtzIGluIHlvdXIgcGFja2FnZSBsaXN0cyBhcmUgd29ya2luZyBhbmQgY2FuIGJlIHJlYWNoZWQgYnkgeW91ciBkZXZpY2UncyBjb25uZWN0aXZpdHkuIik7CiAgICAgICAgICAgICAgICAkLm1vYmlsZS5sb2FkaW5nKCdoaWRlJyk7CiAgICAgICAgICAgICAgICBpZiAoZm9sZGVyTmFtZSA9PSBnbG9iYWxYTUxMaXN0Rm9sZGVyTmFtZSl7CiAgICAgICAgICAgICAgICAgICAgZGVidWdMb2coIlRFU1Q6IEVSUk9SIDEiKTsKICAgICAgICAgICAgICAgICAgICBydW5jYWxsYmFjayhjYWxsYmFjaywiZmFpbCIpOwogICAgICAgICAgICAgICAgfWVsc2UgaWYgKGZvbGRlck5hbWUuaW5kZXhPZihnbG9iYWxYTUxMaXN0Rm9sZGVyTmFtZSArICIvIikgIT09IC0xKXsKICAgICAgICAgICAgICAgICAgICBkZWJ1Z0xvZygiVEVTVDogRVJST1IgMiIpOwogICAgICAgICAgICAgICAgICAgIHJ1bmNhbGxiYWNrKGNhbGxiYWNrLCAiZmFpbGVkIik7CiAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICBkZWJ1Z0xvZygiVEVTVDogRVJST1IgMyIpOwogICAgICAgICAgICAgICAgICAgIC8vcnVuY2FsbGJhY2soY2FsbGJhY2ssICJkb3dubG9hZGZhaWxlZCIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZGVidWdMb2coIiFDb3VsZG4gbm90IGRvd25sb2FkIGEgZmlsZTogIiArIGN1cnJlbnRGaWxlTmFtZSArICIgYXQgZm9sZGVyOiAiICsgZm9sZGVyTmFtZSk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGRvd25sb2FkZmFpbAogICAgICAgICk7CiAgICB9CiAgIAogICAgLyogRnVuY3Rpb24gdGhhdCByZWFkcyB0aGUgcGFja2FnZSB4bWwgZG93bmxvYWRlZCBhbmQgcmVhZHMgdGhyb3VnaCB0aGUgWE1MKi8gICAgICAgCiAgICBmdW5jdGlvbiByZWFkUGFja2FnZUZpbGUobXNnKXsKICAgICAgICAvL2FsZXJ0KCJtZXNzYWdlOiAiICsgbXNnKTsKICAgICAgICAvL3BhY2thZ2VTdHJpbmcgaXMgc3RpbGwgc2V0IGJ5IHRoZSBwcmV2aW91cyBmdW5jdGlvbnMKICAgICAgICAvL1RvIGdldCB0aGUgZmlsZU5hbWUgYW5kIGZvbGRlck5hbWUKICAgICAgICB2YXIgdXJpU3BsaXQgPSBwYWNrYWdlU3RyaW5nLnNwbGl0KCIvIik7CiAgICAgICAgdmFyIGxhc3RQb3MgPSB1cmlTcGxpdC5sZW5ndGggLSAxOwogICAgICAgIGZpbGVOYW1lID0gdXJpU3BsaXRbbGFzdFBvc107ICAKICAgICAgICAvL2FsZXJ0KCJwYWNrYWdlU3RyaW5nOiAiICsgcGFja2FnZVN0cmluZyArICIgZmlsZU5hbWU6ICIgKyBmaWxlTmFtZSk7CiAgICAgICAgdmFyIGZpbGVOYW1lQ2hlY2tBcnJheSA9IGZpbGVOYW1lLnNwbGl0KCJfdXN0YWRwa2ciKTsKICAgICAgICB2YXIgcGFja2FnZUZvbGRlck5hbWVQb3MgPSBmaWxlTmFtZUNoZWNrQXJyYXkubGVuZ3RoIC0gMjsKICAgICAgICBwYWNrYWdlRm9sZGVyTmFtZSA9IGZpbGVOYW1lQ2hlY2tBcnJheVtwYWNrYWdlRm9sZGVyTmFtZVBvc107CiAgICAgICAgaWYgKCFwYWNrYWdlRm9sZGVyTmFtZSl7CiAgICAgICAgICAgIHBhY2thZ2VGb2xkZXJOYW1lPSIiOwogICAgICAgIH0KICAgICAgICAvL2FsZXJ0KCJwYWNrYWdlRm9sZGVyTmFtZTogIiArIHBhY2thZ2VGb2xkZXJOYW1lKTsKICAgICAgICAvLyBXZSBjYWxsIHRoZSBGaWxlU3lzdGVtIGFnYWluIHN1Y2ggdGhhdCB3ZSBnZXQgdGhlIHJvb3RQYXRoIGFnYWluLiBXZSBjYW4gdGhlbiB0cmlnZ2VyIHRoaXMgZnVuY3Rpb24gaWYgcmVxdWlyZWQgZm9yIGRldmVsb3BtZW50IHB1cnBvc2VzLgogICAgICAgIC8vIEluIHRoYXQgY2FzZSwgd2UgbmVlZCB0byBzZXQgdGhlIHBhY2thZ2VTdHJpbmcgYWdhaW4gYXMgYSBsaW5rIG9yIGZpbGVOYW1lIGluIHRoaXMgZnVuY3Rpb24gYXM6IGZpbGVOYW1lID0gdGVzdFBhY2thZ2VfdXN0YWRwa2dfaHRtbDUueG1sOwogICAgICAgIHdpbmRvdy5yZXF1ZXN0RmlsZVN5c3RlbShMb2NhbEZpbGVTeXN0ZW0uUEVSU0lTVEVOVCwgMCwgZ2V0WE1MRmlsZSwgZnVuY3Rpb24oKXthbGVydCgiU29tZXRoaW5nIHdlbnQgd3JvbmcgaW4gZ2V0dGluZyB0aGUgZmlsZSBzeXN0ZW0gb2YgdGhlIHBhY2thZ2UgZmlsZS4gSW50ZXJuYWwgRXJyb3IuIik7IGRlYnVnTG9nKCJTb21ldGhpbmcgd2VudCB3cm9uZyBpbiByZWFkUGFja2FnZUZpbGUobXNnKSAiKTt9KTsgLy8gZXJyb3JmaWxlc3lzdGVtIChtZXNzYWdlcy0+ZW4uanMpCiAgICB9CiAgICAKICAgIC8qIEZ1bmN0aW9uIHRoYXQgc3RhcnRzIHRoZSBwcm9jZXNzIHRvIGdldCB0aGUgWE1MIGZpbGUgVVJMIHNldCBieSBwcmV2aW91cyBmdW5jdGlvbnMuICovCiAgICBmdW5jdGlvbiBnZXRYTUxGaWxlKGZpbGVTeXN0ZW0pewogICAgICAgIGRlYnVnTG9nKCJHb3QgWE1MIEZpbGVTeXN0ZW0uIik7CiAgICAgICAgcm9vdFBhdGggPSBmaWxlU3lzdGVtLnJvb3QuZnVsbFBhdGg7CiAgICAgICAgLy92YXIgZm9yeG1sID0gInVzdGFkbW9iaWxlQ29udGVudC8iICsgZmlsZU5hbWU7CiAgICAgICAgdmFyIGZvcnhtbCA9ICJ1c3RhZG1vYmlsZUNvbnRlbnQvYWxsLyIgKyBwYWNrYWdlRm9sZGVyTmFtZSArICIvIiArIGZpbGVOYW1lOwogICAgICAgIGRlYnVnTG9nKCJYTUwgUHJvY2Vzc2luZyBzdGFydGVkLiIpOwogICAgICAgIGRlYnVnTG9nKCJYTUwgZmlsZSB3YXMgZG93bmxvYWRlZCBmcm9tIFVSTDogIiArIHBhY2thZ2VTdHJpbmcgKTsKICAgICAgICB2YXIgcGF0aFRvUGFja2FnZUZpbGUgPSByb290UGF0aCArICIvdXN0YWRtb2JpbGVDb250ZW50LyIgKyBmaWxlTmFtZTsKICAgICAgICBkZWJ1Z0xvZygiVGhlIFhNTCBsb2NhdGlvbiBvbiB0aGUgZGV2aWNlIGlzOiAiICsgcGF0aFRvUGFja2FnZUZpbGUpOyAgICAgICAgICAgIAogICAgICAgIGdldERpciA9ICJ1c3RhZG1vYmlsZUNvbnRlbnQvIiArIHBhY2thZ2VGb2xkZXJOYW1lOwogICAgICAgIGRlYnVnTG9nKCJDSEVDS0lORyBJRiBESVJFQ1RPUlk6ICIgKyBnZXREaXIrICIgRVhJU1RTLiBJRiBOT1QsIENSRUFUSU5HIElULiIpOwogICAgICAgIGZpbGVTeXN0ZW0ucm9vdC5nZXREaXJlY3RvcnkoZ2V0RGlyLCB7Y3JlYXRlOnRydWUsIGV4Y2x1c2l2ZTpmYWxzZX0sIGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIGRlYnVnTG9nKCJDcmVhdGluZyBMaXN0IERpciBzdWNjZXNzLiIpOwogICAgICAgICAgICBkZWJ1Z0xvZygiZm9yeG1sIGlzOiAiICsgZm9yeG1sKTsgICAKICAgICAgICAgICAgZGVidWdMb2coIkdFVFRJTkcgVEhFIFhNTCEiKTsKICAgICAgICAgICAgZmlsZVN5c3RlbS5yb290LmdldEZpbGUoZm9yeG1sLCB7Y3JlYXRlOmZhbHNlLCBleGNsdXNpdmU6ZmFsc2V9LCBnb3RYTUxGaWxlLCBmdW5jdGlvbigpe2FsZXJ0KCJTb21ldGhpbmcgd2VudCB3cm9uZyBpbiBnZXR0aW5nIHRoZSBmaWxlIFhNTCBQYWNrYWdlICIpOyBkZWJ1Z0xvZygiU29tZXRoaW5nIHdlbnQgd3JvbmcgaW4gZ2V0WE1MRmlsZShmaWxlU3lzdGVtKSAiKTt9KTsKICAgICAgICB9LCBmdW5jdGlvbigpe2RlYnVnTG9nKCJDcmVhdGluZyBwYWNrYWdlIERpciB1bnN1Y2Nlc3MuIik7JC5tb2JpbGUubG9hZGluZygnaGlkZScpOyBhbGVydCgiR2V0dGluZyBQYWNrYWdlIGZpbGUgb24gdG8geW91ciBkZXZpY2UgZmFpbGVkLiIpO30pOwogICAgfQogICAgLyogZnVuY3Rpb24gdG8gZ2V0IHRoZSBmaWxlIGFmdGVyIGZpbmRpbmcgaXQgKi8gICAgCiAgICBmdW5jdGlvbiBnb3RYTUxGaWxlKGZpbGVFbnRyeSl7CiAgICAgICAgZGVidWdMb2coIkdvdCBYTUwgZmlsZS4iKTsKICAgICAgICBmaWxlRW50cnkuZmlsZShnb3RGaWxlLGZ1bmN0aW9uKCl7YWxlcnQoIlNvbWV0aGluZyB3ZW50IHdyb25nIGluIGdldHRpbmcgUGFja2FnZSBYTUwgZmlsZSIpOyBkZWJ1Z0xvZygiU29tZXRoaW5nIHdlbnQgd3JvbmcgaW4gZ290WE1MRmlsZShmaWxlRW50cnkpIik7fSk7CiAgICB9CiAgICAvKiBmdW5jdGlvbiB0byByZWFkIHRoZSBmaWxlLiAqLwogICAgZnVuY3Rpb24gZ290RmlsZShmaWxlKXsKICAgICAgICAgICAgZGVidWdMb2coIlJlYWRpbmcgdGhlIFhNTCBmaWxlLiIpOwogICAgICAgICAgICB2YXIgeG1sVGFnID0gImZpbGUiOwogICAgICAgICAgIHJlYWRYTUxBc1RleHQoZmlsZSwgeG1sVGFnKTsKICAgIH0KCiAgICAvKiBGdW5jdGlvbiB0aGF0IGdvZXMgdGhyb3VnaCB0aGUgeG1sIGZpbGVzIGFuZCBnZXRzIHRhZyBpbmZvcm1hdGlvbiBhbmQgcHJvY2VzcydzIGl0LiovCiAgICBmdW5jdGlvbiByZWFkWE1MQXNUZXh0KGZpbGUsIHhtbFRhZykgewogICAgICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpOwogICAgICAgIGZpbGVEb3dubG9hZExpc3QgPSBuZXcgQXJyYXkoKTsKICAgICAgICByZWFkZXIub25sb2FkZW5kID0gZnVuY3Rpb24oZXZ0KSB7CiAgICAgICAgICAgIGRlYnVnTG9nKCJSZWFkaW5nIHRoZSBYTUwgYXMgdGV4dC4iKTsKICAgICAgICAgICAgeG1sID0gZXZ0LnRhcmdldC5yZXN1bHQ7IC8vIFRoZSB4bWwgZmlsZSByZWFkIGlzIG5vdyBzdG9yZWQgaW4geG1sCiAgICAgICAgICAgIHhtbERvYyA9ICQucGFyc2VYTUwoIHhtbCApLAogICAgICAgICAgICAgICAkeG1sID0gJCggeG1sRG9jICk7CiAgICAgICAgICAgIGRlYnVnTG9nKHhtbFRhZyArICJzIGFyZSwiKTsKICAgICAgICAgICAgJHhtbC5maW5kKHhtbFRhZykuZWFjaChmdW5jdGlvbigpewogICAgICAgICAgICAgICAgaWYoeG1sVGFnID09ICJmaWxlIil7CiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRGaWxlID0gJCh0aGlzKS50ZXh0KCk7CiAgICAgICAgICAgICAgICAgICAgZGVidWdMb2coIiAtPiAiICsgY3VycmVudEZpbGUpOwogICAgICAgICAgICAgICAgICAgIGZpbGVEb3dubG9hZExpc3RbZmlsZURvd25sb2FkTGlzdC5sZW5ndGhdICA9ICAkKHRoaXMpLnRleHQoKTsKICAgICAgICAgICAgICAgIH1lbHNlIGlmKHhtbFRhZyA9PSAicGFja2FnZSIpewogICAgICAgICAgICAgICAgICAgIGRlYnVnTG9nKCIgLT4gIiArICQodGhpcykudGV4dCgpKTsKICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudFhNTFBhdGggPSAkKHRoaXMpLnRleHQoKTsgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICB2YXIgdXJpU3BsaXQgPSBjdXJyZW50WE1MUGF0aC5zcGxpdCgiLyIpOwogICAgICAgICAgICAgICAgICAgIHZhciBsYXN0UG9zID0gdXJpU3BsaXQubGVuZ3RoIC0gMTsKICAgICAgICAgICAgICAgICAgICB2YXIgZnVsbEZpbGVOYW1lID0gdXJpU3BsaXRbbGFzdFBvc107IAogICAgICAgICAgICAgICAgICAgIHZhciBmaWxlTmFtZUNoZWNrQXJyYXkgPSBmdWxsRmlsZU5hbWUuc3BsaXQoIl91c3RhZHBrZyIpOwogICAgICAgICAgICAgICAgICAgIHZhciBwYWNrYWdlRm9sZGVyTmFtZVBvcyA9IGZpbGVOYW1lQ2hlY2tBcnJheS5sZW5ndGggLSAyOwogICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50WE1MTmFtZSA9IGZpbGVOYW1lQ2hlY2tBcnJheVtwYWNrYWdlRm9sZGVyTmFtZVBvc107CiAgICAgICAgICAgICAgICAgICAgaWYgKCFjdXJyZW50WE1MTmFtZSl7CiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRYTUxOYW1lID0gY3VycmVudFhNTFBhdGg7CiAgICAgICAgICAgICAgICAgICAgfS8vIFRoZSBmb2xsb3dpbmcgd2lsbCBhcHBlbmQgalF1ZXJ5IGxpc3QgaHRtbCBpbiB0aGUgcGFnZS4gQWxsIHRoZXNlIGFyZSBsaW5rZWQgd2l0aCBhbiBvbmNsaWNrIGZ1bmN0aW9uIGNhbGwuIAogICAgICAgICAgICAgICAgICAgICQoIiNwYWNrYWdlTGlzdCIpLmFwcGVuZCgiPGEgb25jbGljaz0nc29tZVRoaW5nKFwiIiArIGN1cnJlbnRYTUxQYXRoICsgIlwiKScgaHJlZj1cIiNcIiBkYXRhLXJvbGU9XCJidXR0b25cIiBkYXRhLWljb249XCJzdGFyXCIgZGF0YS1hamF4PVwiZmFsc2VcIj4iICsgY3VycmVudFhNTE5hbWUgKyAiPC9hPiIpLnRyaWdnZXIoImNyZWF0ZSIpOyAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBpZih4bWxUYWcgPT0gImZpbGUiKXsKICAgICAgICAgICAgICAgIGRlYnVnTG9nKCJEb3dubG9hZGluZyBhbGwgZmlsZXMgZnJvbTogIiArIHBhY2thZ2VGb2xkZXJOYW1lICsgIiB0byBmb2xkZXI6ICIgKyByb290UGF0aCArICIvdXN0YWRtb2JpbGVDb250ZW4vIiArIHBhY2thZ2VGb2xkZXJOYW1lICsgIi8iKTsKICAgICAgICAgICAgICAgIGRvd25sb2FkTmV4dEZpbGUoKTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJlYWRlci5yZWFkQXNUZXh0KGZpbGUpOwogICAgICAgIGlmKHhtbFRhZyA9PSAicGFja2FnZSIpewogICAgICAgICAgICAkLm1vYmlsZS5sb2FkaW5nKCdoaWRlJyk7CiAgICAgICAgICAgIGRlYnVnTG9nKCJURVNUOiBDSEVDS0lORyBwYWNrYWdlWE1MQ2FsbGJhY2siKTsKICAgICAgICAgICAgaWYocGFja2FnZVhNTENhbGxiYWNrICE9IG51bGwgJiYgdHlwZW9mIHBhY2thZ2VYTUxDYWxsYmFjayA9PT0gImZ1bmN0aW9uIiApewogICAgICAgICAgICAgICAgZGVidWdMb2coIlRFU1RMIElOIHJ1bm5pbmcgcGFja2FnZVhNTENhbGxiYWNrIGNhbGwgYmFjayIpOwogICAgICAgICAgICAgICAgcnVuY2FsbGJhY2socGFja2FnZVhNTENhbGxiYWNrLCAieG1sIGxpc3QgcHJvY2Vzc2luZyBwYXNzIik7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgfQogICAgICAgIH1lbHNlIGlmKHhtbFRhZyA9PSAiZmlsZSIpewogICAgICAgICAgICAkLm1vYmlsZS5sb2FkaW5nKCdoaWRlJyk7CiAgICAgICAgICAgIGRlYnVnTG9nKCJURVNUOiBDSEVDS0lORyBGSUxFIFhNTCBGaWxlIHRhZy4iKTsKICAgICAgICAgICAgcnVuY2FsbGJhY2soZmlsZVhNTENhbGxiYWNrLCAieG1sIHByb2Nlc3NpbmcgcGFzcyIpOwogICAgICAgIH1lbHNlewogICAgICAgICAgICAkLm1vYmlsZS5sb2FkaW5nKCdoaWRlJyk7CiAgICAgICAgICAgIGRlYnVnTG9nKCJURVNUOiBFUlJPUiBpbiB4bWwgZmlsZS9saXN0IHByb2Nlc3NpbmcuIEZBSUwuIik7CiAgICAgICAgICAgIHJ1bmNhbGxiYWNrKGNhbGxiYWNrLCAieG1sIGZpbGUvbGlzdCBwcm9jZXNzaW5nIGZhaWxlZCIpOwogICAgICAgIH0KICAgIH0KCiAgICAvKiBGdW5jdGlvbiB0aGF0IGl0ZXJhdGVzIHRocm91Z2ggbGlzdCBvZiBmaWxlcyB0byBiZSBkb3dubG9hZGVkIGFuZCBjYWxscyB0aGUgZG93bmxvYWQgZnVuY3Rpb24gKi8KICAgIGZ1bmN0aW9uIGRvd25sb2FkTmV4dEZpbGUoKXsKICAgICAgICBpZiAoIGN1cnJlbnRGaWxlRG93bmxvYWRJbmRleCA8IGZpbGVEb3dubG9hZExpc3QubGVuZ3RoICkgeyAvLyBpZiB0aGVyZSBpcyBzb21ldGhpbmcgdG8gZG93bmxvYWQuLgogICAgICAgICAgICBzdGFydEZpbGVEb3dubG9hZChmaWxlRG93bmxvYWRMaXN0W2N1cnJlbnRGaWxlRG93bmxvYWRJbmRleCsrXSwgcGFja2FnZUZvbGRlck5hbWUpOwogICAgICAgIH1lbHNlewogICAgICAgICAgICBkZWJ1Z0xvZygiTm8gbW9yZSBmaWxlcyBsZWZ0IHRvIHNjYW4gaW4gdGhlIHBhY2thZ2U6ICIgKyBmaWxlTmFtZSk7ICAgICAgICAgIAogICAgICAgICAgICAkLm1vYmlsZS5sb2FkaW5nKCdoaWRlJyk7CiAgICAgICAgICAgIC8vaWYoZmlsZVhNTENhbGxiYWNrICE9IG51bGwgJiYgdHlwZW9mIGZpbGVYTUxDYWxsYmFjayA9PT0gImZ1bmN0aW9uIil7CiAgICAgICAgICAgICAgICBhbGVydCgiRG93bmxvYWQgZmluaXNoZWQuIik7CiAgICAgICAgICAgIC8vfQoJCQlkZWJ1Z0xvZygiTm93IHRyYW5zZmVyaW5nIHVzdGFkbW9iaWxlIGphdmFzY3JpcHRzIGFuZCBsb2dpYyB0byB0aGUgcGFja2FnZSBmb2xkZXI6ICIgKyBwYWNrYWdlRm9sZGVyTmFtZSk7CgkJCXdyaXRlTmV4dEJhc2U2NFRvRmlsZShwYWNrYWdlRm9sZGVyTmFtZSk7CiAgICAgICAgICAgIAogICAgICAgICAgICAvLyBGb3IgdGVzdHMuLgogICAgICAgICAgICBpZiggYWxsRmlsZURvd25sb2FkQ2FsbGJhY2sgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhbGxGaWxlRG93bmxvYWRDYWxsYmFjayA9PT0gImZ1bmN0aW9uIil7CiAgICAgICAgICAgICAgICAgICAgYWxsRmlsZURvd25sb2FkQ2FsbGJhY2soKTsKICAgICAgICAgICAgICAgIH0gICAgICAgCiAgICAgICAgICAgIH0KCgogICAgICAgIH0KICAgICAgICAKICAgIH0KICAgIAogICAgZnVuY3Rpb24gcnVuY2FsbGJhY2soY2FsbGJhY2tmdW5jdGlvbiwgYXJnKXsKICAgICAgICBpZiAoY2FsbGJhY2tmdW5jdGlvbiAhPW51bGwgJiYgdHlwZW9mIGNhbGxiYWNrZnVuY3Rpb24gPT09ICJmdW5jdGlvbiIpewogICAgICAgICAgICBkZWJ1Z0xvZygiV2l0aGluIHRoZSBydW5jYWxsYmFja2Z1bmN0aW9uIG9rYXkgd2l0aCBhcmd1bWVudDogIiArIGFyZyk7CiAgICAgICAgICAgIGNhbGxiYWNrZnVuY3Rpb24oYXJnKTsKICAgICAgICB9ICAgCiAgICB9CgoK", "ustadmobile-getpackages.js"];
var ustadmobileloginjs = ["", "ustadmobile-login.js"];
var ustadmobiletestjs = ["LyoKPCEtLSBUaGlzIGZpbGUgaXMgcGFydCBvZiBVc3RhZCBNb2JpbGUuICAKICAgIAogICAgVXN0YWQgTW9iaWxlIENvcHlyaWdodCAoQykgMjAxMS0yMDEzIFRvdWdocmEgVGVjaG5vbG9naWVzIEZaIExMQy4KCiAgICBVc3RhZCBNb2JpbGUgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeQogICAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkKICAgIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yCiAgICAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uIHdpdGggdGhlIGZvbGxvd2luZyBhZGRpdGlvbmFsIHRlcm1zOgogICAgCiAgICBBbGwgbmFtZXMsIGxpbmtzLCBhbmQgbG9nb3Mgb2YgVXN0YWQgTW9iaWxlIGFuZCBUb3VnaHJhIFRlY2hub2xvZ2llcyBGWiAKICAgIExMQyBtdXN0IGJlIGtlcHQgYXMgdGhleSBhcmUgaW4gdGhlIG9yaWdpbmFsIGRpc3RyaWJ1dGlvbi4gIElmIGFueSBuZXcKICAgIHNjcmVlbnMgYXJlIGFkZGVkIHlvdSBtdXN0IGluY2x1ZGUgdGhlIFVzdGFkIE1vYmlsZSBsb2dvIGFzIGl0IGhhcyBiZWVuCiAgICB1c2VkIGluIHRoZSBvcmlnaW5hbCBkaXN0cmlidXRpb24uICBZb3UgbWF5IG5vdCBjcmVhdGUgYW55IG5ldyAKICAgIGZ1bmN0aW9uYWxpdHkgd2hvc2UgcHVycG9zZSBpcyB0byBkaW1pbmlzaCBvciByZW1vdmUgdGhlIFVzdGFkIE1vYmlsZSAKICAgIExvZ28uICBZb3UgbXVzdCBsZWF2ZSB0aGUgVXN0YWQgTW9iaWxlIGxvZ28gYXMgdGhlIGxvZ28gZm9yIHRoZSAKICAgIGFwcGxpY2F0aW9uIHRvIGJlIHVzZWQgd2l0aCBhbnkgbGF1bmNoZXIgKGUuZy4gdGhlIG1vYmlsZSBhcHAgbGF1bmNoZXIpLiAgCiAgICAKICAgIElmIHlvdSB3YW50IGEgY29tbWVyY2lhbCBsaWNlbnNlIHRvIHJlbW92ZSB0aGUgYWJvdmUgcmVzdHJpY3Rpb24geW91IG11c3QKICAgIGNvbnRhY3QgdXMuICAKICAgIAogICAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UKICAgIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LgoKICAgIFVzdGFkIE1vYmlsZSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLAogICAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YKICAgIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGUKICAgIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuCgoKCgpUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZS4gIEl0IGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBHTlUgR0VORVJBTCBQVUJMSUMgTElDRU5TRSAoIGh0dHA6Ly93d3cuZ251Lm9yZy9jb3B5bGVmdC9ncGwuaHRtbCApIHdpdGggdGhlIGZvbGxvd2luZyAKCkdQTCBMaWNlbnNlIEFkZGl0aW9uYWwgVGVybXMKCkFsbCBuYW1lcywgbGlua3MsIGFuZCBsb2dvcyBvZiBVc3RhZCBNb2JpbGUgYW5kIFRvdWdocmEgVGVjaG5vbG9naWVzIEZaIExMQyBtdXN0IGJlIGtlcHQgYXMgdGhleSBhcmUgaW4gdGhlIG9yaWdpbmFsIGRpc3RyaWJ1dGlvbi4gIElmIGFueSBuZXcgc2NyZWVucyBhcmUgYWRkZWQgeW91IG11c3QgaW5jbHVkZSB0aGUgVXN0YWQgTW9iaWxlIGxvZ28gYXMgaXQgaGFzIGJlZW4gdXNlZCBpbiB0aGUgb3JpZ2luYWwgZGlzdHJpYnV0aW9uLiAgWW91IG1heSBub3QgY3JlYXRlIGFueSBuZXcgZnVuY3Rpb25hbGl0eSB3aG9zZSBwdXJwb3NlIGlzIHRvIGRpbWluaXNoIG9yIHJlbW92ZSB0aGUgVXN0YWQgTW9iaWxlIExvZ28uICBZb3UgbXVzdCBsZWF2ZSB0aGUgVXN0YWQgTW9iaWxlIGxvZ28gYXMgdGhlIGxvZ28gZm9yIHRoZSBhcHBsaWNhdGlvbiB0byBiZSB1c2VkIHdpdGggYW55IGxhdW5jaGVyIChlLmcuIHRoZSBtb2JpbGUgYXBwIGxhdW5jaGVyKS4gIAoKSWYgeW91IG5lZWQgYSBjb21tZXJjaWFsIGxpY2Vuc2UgdG8gcmVtb3ZlIHRoZXNlIHJlc3RyaWN0aW9ucyBwbGVhc2UgY29udGFjdCB1cyBieSBlbWFpbGluZyBpbmZvQHVzdGFkbW9iaWxlLmNvbSAKCi0tPgoKKi8KCi8qCiAgICBUaGUgamF2YXNjcmlwdCBhc3NvY2lhdGVkIHdpdGggcXVuaXQgdGVzdGluZyBvZiB1c3RhZCBtb2JpbGUgYXBwbGljYXRpb24uCiovCgp2YXIgc3RhcnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7CgpmdW5jdGlvbiBjaGVja0Jvb2tzT0soKSB7CgoKICAgIHRlc3QoICJCb29rIExpc3QgVGVzdCIsIGZ1bmN0aW9uKCkgewogICAgICAgIG9rKCBib29rc0ZvdW5kLmxlbmd0aCA+IDAsICJGb3VuZCAiICsgYm9va3NGb3VuZC5sZW5ndGggKyAiIEJvb2tzICIgKTsKICAgIH0pOwp9CgpmdW5jdGlvbiBjaGVja1NvbWV0aGluZ0Vsc2UoKSB7CiAgICB0ZXN0KCAiMSByZWFsbHkgaXMgMSIsIGZ1bmN0aW9uKCkgewogICAgICAgIG9rKCAxID09IDEsICIxIGlzIDEiKTsKICAgIH0pOwp9CgpmdW5jdGlvbiBjaGVja0xvZ2luT0soc3RhdHVzQ29kZSl7CiAgICAvL2xvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCd0ZXN0bW9kZScpOwogICAgLy9sb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndGVzdG1vZGUnLCcxJyk7CiAgICB0ZXN0KCJMb2dpbiBUZXN0IiwgZnVuY3Rpb24oKSB7CiAgICAgICAgb2sgKCBzdGF0dXNDb2RlID09IDIwMCwgIkxvZ2luIHN1Y2Nlc3MiKTsKICAgIH0pOwoKfQoKCi8vZnVuY3Rpb24gY2hlY2tQYWNrYWdlTGlzdFhNTERvd25sb2FkT0soYXJnKXsKLy8gICAgdGVzdCgiRG93bmxvYWQgYW4geG1sIGZpbGUgdmlhIEZpbGVUcmFuc2ZlciIsIGZ1bmN0aW9uKCl7Ci8vICAgICAgICBvayggYXJnID09ICJwYXNzIiwgIlhNTCBmaWxlIGRvd25sb2FkIG9rYXkiKTsKLy8gICAgICAgIC8vb2soIGFyZyA9PSAieG1sIGxpc3QgcHJvY2Vzc2luZyBwYXNzIiwgIlBhY2thZ2UgWE1MIExpc3QgU2NhbiBva2F5Iik7Ci8vICAKLy8gICAgfSk7Ci8vfQoKZnVuY3Rpb24gY2hlY2tQYWNrYWdlTGlzdFhNTFByb2Nlc3NpbmdPSyhhcmcpewogICAgdGVzdCgiU2NhbiBkb3dubG9hZGVkIHBhY2thZ2UgeG1sIGxpc3QgZmlsZSBhbmQgZXh0cmFjdCBwYWNrYWdlIHRhZyBpbmZvcm1hdGlvbiIsIGZ1bmN0aW9uKCl7CiAgICAgICAgb2soIGFyZyA9PSAieG1sIGxpc3QgcHJvY2Vzc2luZyBwYXNzIiwgIlBhY2thZ2UgWE1MIExpc3QgRG93bmxvYWRlZCBhbmQgU2NhbiBva2F5Iik7CiAgICB9KTsKfQoKZnVuY3Rpb24gY2hlY2tQYWNrYWdlWE1MUHJvY2Vzc2luZ09LKGFyZyl7CiAgICB0ZXN0KCJTY2FuIGRvd25sb2FkZWQgcGFja2FnZSB4bWwgZmlsZSBhbmQgZXh0cmFjdCBmaWxlIHRhZyBpbmZvcm1hdGlvbiIsIGZ1bmN0aW9uKCl7CiAgICAgICAgb2soIGFyZyA9PSAieG1sIHByb2Nlc3NpbmcgcGFzcyIsICJQYWNrYWdlIFhNTCBEb3dubG9hZGVkIGFuZCBTY2FuIG9rYXkiKTsKICAgIH0pOwp9CgovL2Z1bmN0aW9uIGNoZWNrUGFja2FnZVhNTERvd25sb2FkT0soYXJnKXsKLy8gICAgdGVzdCgiRG93bmxvYWQgYSBQYWNrYWdlIFhNTCBmaWxlIHZpYSBGaWxlVHJhbnNmZXIiLCBmdW5jdGlvbigpewovLyAgICAgICAgb2soIGFyZyA9PSAicGFzc2VkIiAsICJQYWNrYWdlIFhNTCBEb3dubG9hZCBva2F5Iik7Ci8vICAgICAgICBvayggYXJnID09ICJkb3dubG9hZHBhc3NlZCIsICJGaWxlcyBmcm9tIHBhY2thZ2UgZG93bmxvYWQgb2theSIpOwovLyAgICAgICAgb2soIGFyZyA9PSAieG1sIHByb2Nlc3NpbmcgcGFzcyIsICJQYWNrYWdlIFhNTCBTY2FuIG9rYXkiKTsKLy8gICAgfSk7Ci8vfQoKLy9mdW5jdGlvbiBjaGVja1BhY2thZ2VGaWxlRG93bmxvYWRPSygpewovLyAgICB0ZXN0KCJEb3dubG9hZCBhbGwgZmlsZXMgZnJvbSBQYWNrYWdlIFhNTCIsIGZ1bmN0aW9uKCl7Ci8vICAgICAgICBvayggYXJnID09ICJkb3dubG9hZHBhc3NlZCIgLCAiRmlsZXMgZnJvbSBwYWNrYWdlIGRvd25sb2FkIG9rYXkiKTsKLy8gICAgfSk7Ci8vfQoKZnVuY3Rpb24gY2hlY2tCYXNlNjRUb0ZpbGVDb252ZXJzaW9uT0soYXJnKXsKICAgIHRlc3QoIkNoZWNrIEJhc2U2NCB0byBmaWxlIGNvbnZlcnNpb24gcG9zdCBwYWNrYWdlIGRvd25sb2FkIiwgZnVuY3Rpb24oKXsKICAgICAgICBvayggYXJnID09ICJiYXNlNjRUb0ZpbGUgc3VjY2VzcyIsICJCYXNlIDY0IHRvIGZpbGUgY29udmVyc2lvbiBva2F5Iik7CiAgICAgICAgfSk7Cn0KCmZ1bmN0aW9uIHN0YXJ0VGVzdE9uTG9hZENvdW50ZXIoKXsKCiAgICBzZXRUaW1lb3V0KCJjaGVja1NvbWV0aGluZ0Vsc2UoKSIsIDUwMCk7CgogICAgY3VycmVudEVudHJpZXNJbmRleCA9IDA7CiAgICBjdXJyZW50Rm9sZGVySW5kZXggPSAwOwogICAgYWxsQm9va0ZvdW5kQ2FsbGJhY2sgPSBjaGVja0Jvb2tzT0s7CiAgICBwb3B1bGF0ZU5leHREaXIoKTsKCQoJdmFyIHVzZXJuID0gIiI7Cgl2YXIgcGFzc3cgPSAiIjsKCS8vQ29kZSB0byBnZXQgdXNlcm5hbWUgKHVzZXJuKSBhbmQgcGFzc3dvcmQgKHBhc3N3KSBnb2VzIGhlcmUuCgogICAgdW1sb2dpbih1c2VybixwYXNzdywgJ2h0dHA6Ly9pbnRyYW5ldC5wYWl3YXN0b29uLm5ldC91bWNsb3VkL2FwcC9sb2dpbi54aHRtbCcsIGNoZWNrTG9naW5PSyk7CgogICAgdGVzdFBhY2thZ2VMaXN0WE1MKCdodHRwOi8vd3d3LnVzdGFkbW9iaWxlLmNvbS9ib29rcy9hbGxfdXN0YWRwa2dfaHRtbDUueG1sJywgJ2FsbCcsIGNoZWNrUGFja2FnZUxpc3RYTUxQcm9jZXNzaW5nT0spOwoKICAgIHRlc3RQYWNrYWdlTGlzdFhNTCgnaHR0cDovL3d3dy51c3RhZG1vYmlsZS5jb20vYm9va3MvVGVzdEJvb2syX3VzdGFkcGtnX2h0bWw1LnhtbCcsICdhbGwvVGVzdEJvb2syJywgY2hlY2tQYWNrYWdlWE1MUHJvY2Vzc2luZ09LKTsgICAgCiAgICAKICAgIC8vYmFzZTY0RmlsZUZvbGRlciA9ICIvdXN0YWRtb2JpbGVDb250ZW50L2FsbC8iOwogICAgLy92YXIgYmFzZTY0VGVzdFZhciA9IFsiRFFwMllYSWdaWGhsVEdGemRGQmhaMlVnUFNBaUxpNHZJanNOQ25aaGNpQmxlR1ZOWlc1MVVHRm5aU0E5SUNKMWMzUmhaRzF2WW1sc1pWOXRaVzUxVUdGblpTNW9kRzFzSWpzTkNpOHZiRzlqWVd4VGRHOXlZV2RsTG5ObGRFbDBaVzBvSjJWNFpVMWxiblZRWVdkbEp5eGxlR1ZOWlc1MVVDazdEUXAyWVhJZ1oyeHZZbUZzV0UxTVRHbHpkRVp2YkdSbGNrNWhiV1VnUFNBaVlXeHNJanNOQ2c9PSIsICJiYXNlNjRVbml0VGVzdE91dHB1dC5qcyJdOyAgICAKICAgIC8vaWYoYmFzZTY0VGVzdFZhclsxXSA9PSAiYmFzZTY0VW5pdFRlc3RPdXRwdXQuanMiKXsKICAgIC8vc2V0VGltZW91dCgid3JpdGVCYXNlNjQoYmFzZTY0VGVzdFZhciwgY2hlY2tCYXNlNjRUb0ZpbGVDb252ZXJzaW9uT0spIiwgNTAwKTsKICAgIC8vfQoKCgp9CgoK", "ustadmobile-test.js"];
var touchswipejs = ["", "jquery.touchSwipe.min.js"];
var base64Testjs = ["dmFyIGV4ZUxhc3RQYWdlID0gIi4uLyI7CnZhciBleGVNZW51UGFnZSA9ICJ1c3RhZG1vYmlsZV9tZW51UGFnZS5odG1sIjsKLy9sb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnZXhlTWVudVBhZ2UnLGV4ZU1lbnVQKTsKdmFyIGdsb2JhbFhNTExpc3RGb2xkZXJOYW1lID0gImFsbCI7Cgo=", "base64Test.js"];
var modernizrjs = ["", "modernizr.js"];
var jquerymobilejs = ["", "jquery.mobile-1.3.2.min.js"];
